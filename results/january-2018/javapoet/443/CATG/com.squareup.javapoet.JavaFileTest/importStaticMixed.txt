@org.junit.Test(timeout = 10000)
public void importStaticMixed_Ex2_CATG395() {
    com.squareup.javapoet.JavaFile source = com.squareup.javapoet.JavaFile.builder("", com.squareup.javapoet.TypeSpec.classBuilder("").addStaticBlock(com.squareup.javapoet.CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") =", java.lang.Thread.State.class).addStatement("$T.gc()", java.lang.System.class).addStatement("$1T.out.println($1T.nanoTime())", java.lang.System.class).build()).addMethod(com.squareup.javapoet.MethodSpec.constructorBuilder().addParameter(java.lang.Thread.State[].class, "states").varargs(false).build()).build()).addStaticImport(java.lang.Thread.State.BLOCKED).addStaticImport(java.lang.System.class, "*").addStaticImport(java.lang.Thread.State.class, "valueOf").build();
}
@org.junit.Test(timeout = 10000)
public void importStaticMixed_Ex2_CATG397() {
    com.squareup.javapoet.JavaFile source = com.squareup.javapoet.JavaFile.builder("", com.squareup.javapoet.TypeSpec.classBuilder("").addStaticBlock(com.squareup.javapoet.CodeBlock.builder().addStatement("", java.lang.Thread.State.class).addStatement("", java.lang.System.class).addStatement("$1T.out.println($1T.nanoTime())", java.lang.System.class).build()).addMethod(com.squareup.javapoet.MethodSpec.constructorBuilder().addParameter(java.lang.Thread.State[].class, "states").varargs(false).build()).build()).addStaticImport(java.lang.Thread.State.BLOCKED).addStaticImport(java.lang.System.class, "*").addStaticImport(java.lang.Thread.State.class, "valueOf").build();
}
@org.junit.Test(timeout = 10000)
public void importStaticMixed_Ex2_CATG399() {
    com.squareup.javapoet.JavaFile source = com.squareup.javapoet.JavaFile.builder("", com.squareup.javapoet.TypeSpec.classBuilder("").addStaticBlock(com.squareup.javapoet.CodeBlock.builder().addStatement("", java.lang.Thread.State.class).addStatement("", java.lang.System.class).addStatement("$1T.out.println($1T.nanoTime())", java.lang.System.class).build()).addMethod(com.squareup.javapoet.MethodSpec.constructorBuilder().addParameter(java.lang.Thread.State[].class, "states").varargs(false).build()).build()).addStaticImport(java.lang.Thread.State.BLOCKED).addStaticImport(java.lang.System.class, "*").addStaticImport(java.lang.Thread.State.class, "valueOf").build();
}