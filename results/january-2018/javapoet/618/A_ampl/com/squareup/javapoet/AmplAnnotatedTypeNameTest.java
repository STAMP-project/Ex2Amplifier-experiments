package com.squareup.javapoet;


import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


public class AmplAnnotatedTypeNameTest {
    public @interface NeverNull {}

    @Target(ElementType.TYPE_USE)
    public @interface TypeUseAnnotation {}

    private static final String NN = AmplAnnotatedTypeNameTest.NeverNull.class.getCanonicalName();

    private final AnnotationSpec NEVER_NULL = AnnotationSpec.builder(AmplAnnotatedTypeNameTest.NeverNull.class).build();

    private void annotatedEquivalence(TypeName type) {
        Assert.assertFalse(type.isAnnotated());
        Assert.assertEquals(type, type);
        Assert.assertEquals(type.annotated(NEVER_NULL), type.annotated(NEVER_NULL));
        Assert.assertNotEquals(type, type.annotated(NEVER_NULL));
        Assert.assertEquals(type.hashCode(), type.hashCode());
        Assert.assertEquals(type.annotated(NEVER_NULL).hashCode(), type.annotated(NEVER_NULL).hashCode());
        Assert.assertNotEquals(type.hashCode(), type.annotated(NEVER_NULL).hashCode());
    }

    @Ignore
    @Test
    public void annotatedNestedType() {
        String expected = ("java.util.Map.@" + (AmplAnnotatedTypeNameTest.TypeUseAnnotation.class.getCanonicalName())) + " Entry";
        AnnotationSpec typeUseAnnotation = AnnotationSpec.builder(AmplAnnotatedTypeNameTest.TypeUseAnnotation.class).build();
        TypeName type = TypeName.get(Map.Entry.class).annotated(typeUseAnnotation);
        String actual = type.toString();
        Assert.assertEquals(expected, actual);
    }

    @Ignore
    @Test
    public void annotatedNestedParameterizedType() {
        String expected = ("java.util.Map.@" + (AmplAnnotatedTypeNameTest.TypeUseAnnotation.class.getCanonicalName())) + " Entry<java.lang.Byte, java.lang.Byte>";
        AnnotationSpec typeUseAnnotation = AnnotationSpec.builder(AmplAnnotatedTypeNameTest.TypeUseAnnotation.class).build();
        TypeName type = ParameterizedTypeName.get(Map.Entry.class, Byte.class, Byte.class).annotated(typeUseAnnotation);
        String actual = type.toString();
        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 10000)
    public void annotatedType() throws Exception {
        String expected = ("@" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String";
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        TypeName type = TypeName.get(String.class);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
        String actual = type.annotated(this.NEVER_NULL).toString();
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", actual);
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedTwice() throws Exception {
        String expected = ("@" + (AmplAnnotatedTypeNameTest.NN)) + " @java.lang.Override java.lang.String";
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull @java.lang.Override java.lang.String", expected);
        TypeName type = TypeName.get(String.class);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
        String actual = type.annotated(this.NEVER_NULL).annotated(AnnotationSpec.builder(Override.class).build()).toString();
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull @java.lang.Override java.lang.String", actual);
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull @java.lang.Override java.lang.String", expected);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedArgumentOfParameterizedType() throws Exception {
        String expected = ("java.util.List<@" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String>";
        Assert.assertEquals("java.util.List<@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String>", expected);
        TypeName type = TypeName.get(String.class).annotated(NEVER_NULL);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
        ClassName list = ClassName.get(List.class);
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)list).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)list).enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)list).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("List"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).toString());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)list).simpleName());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).toString());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)list).packageName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)list).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).hashCode())));
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)list).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)list).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).simpleNames().contains("List"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).isAnnotated());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).toString());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).simpleName());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).simpleNames().contains("List"));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)list).simpleNames().contains("List"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)list).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).hashCode())));
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        String actual = ParameterizedTypeName.get(list, type).toString();
        Assert.assertEquals("java.util.List<@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String>", actual);
        Assert.assertEquals("java.util.List<@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String>", expected);
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)list).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)list).enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)list).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("List"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).toString());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)list).simpleName());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).toString());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)list).packageName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)list).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).hashCode())));
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)list).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)list).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).simpleNames().contains("List"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).isAnnotated());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).toString());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).simpleName());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).simpleNames().contains("List"));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)list).simpleNames().contains("List"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)list).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).box()).hashCode())));
        Assert.assertEquals("java.util", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("List", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)list).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedWildcardTypeNameWithExtends() throws Exception {
        String expected = ("? extends @" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String";
        Assert.assertEquals("? extends @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        TypeName type = TypeName.get(String.class).annotated(NEVER_NULL);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
        String actual = WildcardTypeName.subtypeOf(type).toString();
        Assert.assertEquals("? extends @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", actual);
        Assert.assertEquals("? extends @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedParameterizedType() throws Exception {
        String expected = ("@" + (AmplAnnotatedTypeNameTest.NN)) + " java.util.List<java.lang.String>";
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.util.List<java.lang.String>", expected);
        TypeName type = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.ParameterizedTypeName)type).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.ParameterizedTypeName)type).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        String actual = type.annotated(this.NEVER_NULL).toString();
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.util.List<java.lang.String>", actual);
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.util.List<java.lang.String>", expected);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.ParameterizedTypeName)type).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.ParameterizedTypeName)type).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedWildcardTypeNameWithSuper() throws Exception {
        String expected = ("? super @" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String";
        Assert.assertEquals("? super @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        TypeName type = TypeName.get(String.class).annotated(NEVER_NULL);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
        String actual = WildcardTypeName.supertypeOf(type).toString();
        Assert.assertEquals("? super @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", actual);
        Assert.assertEquals("? super @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)type).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)type).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)type).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)type).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)type).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)type).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)type).withoutAnnotations()).enclosingClassName());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)type).box()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotated() throws Exception {
        TypeName simpleString = TypeName.get(String.class);
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)simpleString).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)simpleString).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)simpleString).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)simpleString).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)simpleString).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)simpleString).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)simpleString).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)simpleString).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)simpleString).simpleName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)simpleString).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        simpleString.isAnnotated();
        TypeName o_annotated__4 = TypeName.get(String.class);
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)o_annotated__4).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).simpleName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)o_annotated__4).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__4).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)o_annotated__4).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)o_annotated__4).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__4).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)o_annotated__4).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__4).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_annotated__4).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)o_annotated__4).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).isBoxedPrimitive());
        TypeName annotated = simpleString.annotated(NEVER_NULL);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)annotated).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)annotated).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).simpleName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)annotated).enclosingClassName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)annotated).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)annotated).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)annotated).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)annotated).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)annotated).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).reflectionName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)annotated).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)annotated).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).packageName());
        annotated.isAnnotated();
        TypeName o_annotated__8 = annotated.annotated();
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)o_annotated__8).packageName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__8).isBoxedPrimitive());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)o_annotated__8).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)o_annotated__8).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)o_annotated__8).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__8).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)o_annotated__8).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).box()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).box()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_annotated__8).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_annotated__8).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)o_annotated__8).reflectionName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__8).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)simpleString).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)simpleString).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)simpleString).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)simpleString).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)simpleString).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)simpleString).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)simpleString).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)simpleString).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)simpleString).simpleName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).box()).box()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)simpleString).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).box()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)simpleString).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)o_annotated__4).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).simpleName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)o_annotated__4).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__4).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)o_annotated__4).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)o_annotated__4).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__4).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).toString());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertNull(((com.squareup.javapoet.ClassName)o_annotated__4).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_annotated__4).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_annotated__4).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)o_annotated__4).simpleName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)o_annotated__4).topLevelClassName()).box()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_annotated__4).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).reflectionName());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)annotated).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)annotated).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).isBoxedPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).simpleName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).toString());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).enclosingClassName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)annotated).enclosingClassName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)annotated).isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).simpleName());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).box()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isPrimitive());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isAnnotated());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)annotated).packageName());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)annotated).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).reflectionName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).isAnnotated());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName)annotated).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).packageName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).box()).isBoxedPrimitive());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)annotated).simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).topLevelClassName()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).reflectionName());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).simpleName());
        Assert.assertNull(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).enclosingClassName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)annotated).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).withoutAnnotations()).withoutAnnotations()).simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName)annotated).toString());
        Assert.assertEquals("java.lang", ((com.squareup.javapoet.ClassName)((com.squareup.javapoet.ClassName)annotated).topLevelClassName()).packageName());
    }
}

