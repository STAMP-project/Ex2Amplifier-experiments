package com.squareup.javapoet;


import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


public class AmplAnnotatedTypeNameTest {
    public @interface NeverNull {}

    @Target(ElementType.TYPE_USE)
    public @interface TypeUseAnnotation {}

    private static final String NN = AmplAnnotatedTypeNameTest.NeverNull.class.getCanonicalName();

    private final AnnotationSpec NEVER_NULL = AnnotationSpec.builder(AmplAnnotatedTypeNameTest.NeverNull.class).build();

    private void annotatedEquivalence(TypeName type) {
        Assert.assertFalse(type.isAnnotated());
        Assert.assertEquals(type, type);
        Assert.assertEquals(type.annotated(NEVER_NULL), type.annotated(NEVER_NULL));
        Assert.assertNotEquals(type, type.annotated(NEVER_NULL));
        Assert.assertEquals(type.hashCode(), type.hashCode());
        Assert.assertEquals(type.annotated(NEVER_NULL).hashCode(), type.annotated(NEVER_NULL).hashCode());
        Assert.assertNotEquals(type.hashCode(), type.annotated(NEVER_NULL).hashCode());
    }

    @Ignore
    @Test
    public void annotatedNestedType() {
        String expected = ("java.util.Map.@" + (AmplAnnotatedTypeNameTest.TypeUseAnnotation.class.getCanonicalName())) + " Entry";
        AnnotationSpec typeUseAnnotation = AnnotationSpec.builder(AmplAnnotatedTypeNameTest.TypeUseAnnotation.class).build();
        TypeName type = TypeName.get(Map.Entry.class).annotated(typeUseAnnotation);
        String actual = type.toString();
        Assert.assertEquals(expected, actual);
    }

    @Ignore
    @Test
    public void annotatedNestedParameterizedType() {
        String expected = ("java.util.Map.@" + (AmplAnnotatedTypeNameTest.TypeUseAnnotation.class.getCanonicalName())) + " Entry<java.lang.Byte, java.lang.Byte>";
        AnnotationSpec typeUseAnnotation = AnnotationSpec.builder(AmplAnnotatedTypeNameTest.TypeUseAnnotation.class).build();
        TypeName type = ParameterizedTypeName.get(Map.Entry.class, Byte.class, Byte.class).annotated(typeUseAnnotation);
        String actual = type.toString();
        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 10000)
    public void annotatedType() throws Exception {
        String expected = ("@" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String";
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        TypeName type = TypeName.get(String.class);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        String actual = type.annotated(this.NEVER_NULL).toString();
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", actual);
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedTwice() throws Exception {
        String expected = ("@" + (AmplAnnotatedTypeNameTest.NN)) + " @java.lang.Override java.lang.String";
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull @java.lang.Override java.lang.String", expected);
        TypeName type = TypeName.get(String.class);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        String actual = type.annotated(this.NEVER_NULL).annotated(AnnotationSpec.builder(Override.class).build()).toString();
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull @java.lang.Override java.lang.String", actual);
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull @java.lang.Override java.lang.String", expected);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedArgumentOfParameterizedType() throws Exception {
        String expected = ("java.util.List<@" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String>";
        Assert.assertEquals("java.util.List<@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String>", expected);
        TypeName type = TypeName.get(String.class).annotated(NEVER_NULL);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertTrue(isAnnotated());
        ClassName list = ClassName.get(List.class);
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("List", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.util", packageName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (list)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.util", packageName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (list)).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        String actual = ParameterizedTypeName.get(list, type).toString();
        Assert.assertEquals("java.util.List<@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String>", actual);
        Assert.assertEquals("java.util.List<@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String>", expected);
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("List", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.util", packageName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (list)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.util", packageName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (list)).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("List"));
        Assert.assertEquals("java.util.List", reflectionName());
        Assert.assertEquals("java.util.List", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("List", simpleName());
        Assert.assertEquals(65821278, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertTrue(isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedWildcardTypeNameWithExtends() throws Exception {
        String expected = ("? extends @" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String";
        Assert.assertEquals("? extends @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        TypeName type = TypeName.get(String.class).annotated(NEVER_NULL);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertTrue(isAnnotated());
        String actual = WildcardTypeName.subtypeOf(type).toString();
        Assert.assertEquals("? extends @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", actual);
        Assert.assertEquals("? extends @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertTrue(isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedParameterizedType() throws Exception {
        String expected = ("@" + (AmplAnnotatedTypeNameTest.NN)) + " java.util.List<java.lang.String>";
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.util.List<java.lang.String>", expected);
        TypeName type = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.ParameterizedTypeName) (type)).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.ParameterizedTypeName) (type)).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        String actual = type.annotated(this.NEVER_NULL).toString();
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.util.List<java.lang.String>", actual);
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.util.List<java.lang.String>", expected);
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.ParameterizedTypeName) (type)).toString());
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.ParameterizedTypeName) (type)).hashCode())));
        Assert.assertEquals(2123584667, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.util.List<java.lang.String>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotatedWildcardTypeNameWithSuper() throws Exception {
        String expected = ("? super @" + (AmplAnnotatedTypeNameTest.NN)) + " java.lang.String";
        Assert.assertEquals("? super @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        TypeName type = TypeName.get(String.class).annotated(NEVER_NULL);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertTrue(isAnnotated());
        String actual = WildcardTypeName.supertypeOf(type).toString();
        Assert.assertEquals("? super @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", actual);
        Assert.assertEquals("? super @com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", expected);
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (type)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (type)).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertTrue(isAnnotated());
    }

    @Test(timeout = 10000)
    public void annotated() throws Exception {
        TypeName simpleString = TypeName.get(String.class);
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (simpleString)).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (simpleString)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        simpleString.isAnnotated();
        TypeName o_annotated__4 = TypeName.get(String.class);
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (o_annotated__4)).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (o_annotated__4)).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        TypeName annotated = simpleString.annotated(NEVER_NULL);
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (annotated)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (annotated)).toString());
        Assert.assertEquals("java.lang", packageName());
        annotated.isAnnotated();
        TypeName o_annotated__8 = annotated.annotated();
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (o_annotated__8)).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (o_annotated__8)).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (simpleString)).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (simpleString)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (o_annotated__4)).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (o_annotated__4)).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1362420326, ((int) (((com.squareup.javapoet.ClassName) (annotated)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("String", simpleName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(simpleNames().contains("String"));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("@com.squareup.javapoet.AnnotatedTypeNameTest.NeverNull java.lang.String", ((com.squareup.javapoet.ClassName) (annotated)).toString());
        Assert.assertEquals("java.lang", packageName());
    }
}

