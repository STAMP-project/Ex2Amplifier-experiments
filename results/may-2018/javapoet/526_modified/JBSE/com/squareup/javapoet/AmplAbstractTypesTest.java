package com.squareup.javapoet;


import TypeName.INT;
import TypeName.OBJECT;
import TypeName.VOID;
import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.TypeParameterElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.ErrorType;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.type.TypeVisitor;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import org.junit.Assert;
import org.junit.Test;


public abstract class AmplAbstractTypesTest {
    static class Parameterized<Simple, ExtendsClass extends Number, ExtendsInterface extends Runnable, ExtendsTypeVariable extends Simple, Intersection extends Number & Runnable, IntersectionOfInterfaces extends Runnable & Serializable> {}

    static class Recursive<T extends Map<List<T>, Set<T[]>>> {}

    private static class DeclaredTypeAsErrorType implements ErrorType {
        private final DeclaredType declaredType;

        public DeclaredTypeAsErrorType(DeclaredType declaredType) {
            this.declaredType = declaredType;
        }

        @Override
        public Element asElement() {
            return declaredType.asElement();
        }

        @Override
        public TypeMirror getEnclosingType() {
            return declaredType.getEnclosingType();
        }

        @Override
        public List<? extends TypeMirror> getTypeArguments() {
            return declaredType.getTypeArguments();
        }

        @Override
        public TypeKind getKind() {
            return declaredType.getKind();
        }

        @Override
        public <R, P> R accept(TypeVisitor<R, P> typeVisitor, P p) {
            return typeVisitor.visitError(this, p);
        }

        public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {
            throw new UnsupportedOperationException();
        }

        public <A extends Annotation> A getAnnotation(Class<A> annotationType) {
            throw new UnsupportedOperationException();
        }

        public List<? extends AnnotationMirror> getAnnotationMirrors() {
            throw new UnsupportedOperationException();
        }
    }

    protected abstract Elements getElements();

    protected abstract Types getTypes();

    private TypeElement getElement(Class<?> clazz) {
        return getElements().getTypeElement(clazz.getCanonicalName());
    }

    private TypeMirror getMirror(Class<?> clazz) {
        return getElement(clazz).asType();
    }

    @Test(timeout = 10000)
    public void getTypeVariableTypeMirror() throws Exception {
        List<? extends TypeParameterElement> typeVariables = getElement(AmplAbstractTypesTest.Parameterized.class).getTypeParameters();
        ClassName number = ClassName.get(Number.class);
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).box())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("Number", simpleName());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals((-1950496888), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("Number", simpleName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Number", reflectionName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).hashCode())));
        Assert.assertEquals("java.lang.Number", reflectionName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName) (number)).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals((-1950496888), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).box())).hashCode())));
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Number", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName) (number)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("Number", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        ClassName runnable = ClassName.get(Runnable.class);
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(894056284, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName) (runnable)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Runnable", simpleName());
        Assert.assertEquals("java.lang.Runnable", reflectionName());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Runnable", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("Runnable", simpleName());
        Assert.assertEquals("java.lang.Runnable", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Runnable", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName) (runnable)).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).hashCode())));
        Assert.assertEquals(894056284, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).box())).hashCode())));
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        ClassName serializable = ClassName.get(Serializable.class);
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Serializable", simpleName());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.io.Serializable", reflectionName());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1025355070, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.io.Serializable", reflectionName());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.io", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.io", packageName());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName) (serializable)).toString());
        Assert.assertEquals("java.io.Serializable", reflectionName());
        Assert.assertEquals(1025355070, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName) (serializable)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).box())).hashCode())));
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).hashCode())));
        Assert.assertEquals("Serializable", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("Serializable", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        TypeVariableName o_getTypeVariableTypeMirror__11 = TypeVariableName.get("Simple");
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).hashCode())));
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).box())).hashCode())));
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        TypeVariableName o_getTypeVariableTypeMirror__12 = TypeVariableName.get("ExtendsClass", number);
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        TypeVariableName o_getTypeVariableTypeMirror__13 = TypeVariableName.get("ExtendsInterface", runnable);
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).box())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        TypeVariableName o_getTypeVariableTypeMirror__14 = TypeVariableName.get("ExtendsTypeVariable", TypeVariableName.get("Simple"));
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).box())).toString());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        TypeVariableName o_getTypeVariableTypeMirror__16 = TypeVariableName.get("Intersection", number, runnable);
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).hashCode())));
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).box())).toString());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).toString());
        TypeVariableName o_getTypeVariableTypeMirror__17 = TypeVariableName.get("IntersectionOfInterfaces", runnable, serializable);
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__17)).box())).box())).hashCode())));
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__17)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__17)).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__17)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__17)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__17)).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__12)).box())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(894056284, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName) (runnable)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Runnable", simpleName());
        Assert.assertEquals("java.lang.Runnable", reflectionName());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Runnable", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("Runnable", simpleName());
        Assert.assertEquals("java.lang.Runnable", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Runnable", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName) (runnable)).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).hashCode())));
        Assert.assertEquals(894056284, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (runnable)).box())).box())).hashCode())));
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).box())).toString());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__14)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).box())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("Number", simpleName());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals((-1950496888), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("Number", simpleName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Number", reflectionName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).hashCode())));
        Assert.assertEquals("java.lang.Number", reflectionName());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName) (number)).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals((-1950496888), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).box())).hashCode())));
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Number", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (number)).box())).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName) (number)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("Number", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).hashCode())));
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).box())).toString());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__16)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).hashCode())));
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).box())).hashCode())));
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__11)).box())).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-1818419758), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Serializable", simpleName());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.io.Serializable", reflectionName());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1025355070, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.io.Serializable", reflectionName());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.io", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.io", packageName());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName) (serializable)).toString());
        Assert.assertEquals("java.io.Serializable", reflectionName());
        Assert.assertEquals(1025355070, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName) (serializable)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).box())).hashCode())));
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (serializable)).box())).hashCode())));
        Assert.assertEquals("Serializable", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("Serializable", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).box())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeVariableName) (o_getTypeVariableTypeMirror__13)).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
    }

    @Test(timeout = 10000)
    public void getBasicTypeMirror() throws Exception {
        ClassName o_getBasicTypeMirror__1 = ClassName.get(Object.class);
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Object", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("java.lang.Object", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).box())).hashCode())));
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).toString());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Object", simpleName());
        Assert.assertEquals((-1939501186), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals((-1939501186), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).hashCode())));
        Assert.assertEquals("java.lang.Object", reflectionName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Object", simpleName());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).box())).toString());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        ClassName o_getBasicTypeMirror__2 = ClassName.get(Charset.class);
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Charset", simpleName());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.nio.charset", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-1891239605), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", reflectionName());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("java.nio.charset", packageName());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", reflectionName());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("Charset", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Charset", simpleName());
        Assert.assertEquals("java.nio.charset.Charset", reflectionName());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals((-1891239605), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.nio.charset", packageName());
        ClassName o_getBasicTypeMirror__3 = ClassName.get(AmplAbstractTypesTest.class);
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("com.squareup.javapoet", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals((-1998871896), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("AbstractTypesTest", simpleName());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__3)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("AbstractTypesTest", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__3)).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__3)).toString());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__3)).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__3)).box())).box())).hashCode())));
        Assert.assertEquals((-1998871896), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", reflectionName());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals("com.squareup.javapoet", packageName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__3)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("com.squareup.javapoet", packageName());
        Assert.assertEquals("AbstractTypesTest", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Object", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("java.lang.Object", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).box())).hashCode())));
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).toString());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Object", simpleName());
        Assert.assertEquals((-1939501186), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals((-1939501186), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).hashCode())));
        Assert.assertEquals("java.lang.Object", reflectionName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Object", simpleName());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).box())).toString());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__1)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Charset", simpleName());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.nio.charset", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-1891239605), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", reflectionName());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("java.nio.charset", packageName());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", reflectionName());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("Charset", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Charset", simpleName());
        Assert.assertEquals("java.nio.charset.Charset", reflectionName());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals((-1891239605), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getBasicTypeMirror__2)).box())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.nio.charset", packageName());
    }

    @Test(timeout = 10000)
    public void unbox() throws Exception {
        TypeName o_unbox__1 = INT.unbox();
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (o_unbox__1)).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).box())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).box())).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__1)).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).unbox())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).box())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        TypeName o_unbox__2 = VOID.unbox();
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (o_unbox__2)).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).box())).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).unbox())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).unbox())).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).box())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__2)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).unbox())).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        TypeName o_unbox__3 = INT.unbox();
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (o_unbox__3)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).unbox())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).box())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).unbox())).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__3)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).unbox())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        TypeName o_unbox__4 = VOID.unbox();
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (o_unbox__4)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).box())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__4)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        try {
            OBJECT.unbox();
        } catch (UnsupportedOperationException expected) {
        }
        try {
            ClassName.get(String.class).unbox();
        } catch (UnsupportedOperationException expected) {
        }
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (o_unbox__4)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).box())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__4)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__4)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (o_unbox__2)).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).box())).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).unbox())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).unbox())).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).box())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__2)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).box())).unbox())).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__2)).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (o_unbox__3)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).unbox())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).box())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).unbox())).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).box())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__3)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).unbox())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__3)).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (o_unbox__1)).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).box())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).box())).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (o_unbox__1)).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).unbox())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).box())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (o_unbox__1)).box())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
    }

    @Test(timeout = 10000)
    public void getParameterizedTypeMirror() throws Exception {
        DeclaredType setType = getTypes().getDeclaredType(getElement(Set.class), getMirror(Object.class));
        ParameterizedTypeName o_getParameterizedTypeMirror__6 = ParameterizedTypeName.get(ClassName.get(Set.class), ClassName.OBJECT);
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.ParameterizedTypeName) (o_getParameterizedTypeMirror__6)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ParameterizedTypeName) (o_getParameterizedTypeMirror__6)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.ParameterizedTypeName) (o_getParameterizedTypeMirror__6)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ParameterizedTypeName) (o_getParameterizedTypeMirror__6)).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ParameterizedTypeName) (o_getParameterizedTypeMirror__6)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ParameterizedTypeName) (o_getParameterizedTypeMirror__6)).box())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
    }

    @Test(timeout = 10000)
    public void box() throws Exception {
        ClassName o_box__1 = ClassName.get(Integer.class);
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).box())).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).unbox())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (o_box__1)).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).toString());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).box())).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).box())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).unbox())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (o_box__1)).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        ClassName o_box__2 = ClassName.get(Void.class);
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).unbox())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (o_box__2)).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).box())).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).box())).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).unbox())).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).unbox())).toString());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (o_box__2)).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        ClassName o_box__3 = ClassName.get(Integer.class);
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).box())).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (o_box__3)).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).box())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).unbox())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).box())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (o_box__3)).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        ClassName o_box__4 = ClassName.get(Void.class);
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).box())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).unbox())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("Void", simpleName());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).unbox())).toString());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (o_box__4)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).box())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (o_box__4)).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        ClassName o_box__5 = ClassName.get(String.class);
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-1808118704), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__5)).box())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-1808118704), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertEquals("String", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (o_box__5)).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("String", simpleName());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__5)).box())).box())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__5)).box())).toString());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__5)).box())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName) (o_box__5)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).box())).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).unbox())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (o_box__1)).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).toString());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).box())).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).unbox())).box())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__1)).box())).unbox())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (o_box__1)).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).box())).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (o_box__3)).toString());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).box())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).unbox())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).unbox())).toString());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).unbox())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).box())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang.Integer", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.ClassName) (o_box__3)).hashCode())));
        Assert.assertEquals((-2056817302), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__3)).box())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("Integer", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals((-672261827), ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertTrue(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertTrue(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).unbox())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).box())).toString());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (o_box__2)).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).box())).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).box())).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).box())).unbox())).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__2)).unbox())).unbox())).toString());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (o_box__2)).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).unbox())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).box())).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).unbox())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).hashCode())));
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).unbox())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).unbox())).toString());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).hashCode())));
        Assert.assertTrue(isPrimitive());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertEquals("java.lang", packageName());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertNull(enclosingClassName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals("Void", simpleName());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).unbox())).toString());
        Assert.assertEquals(2672083, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName) (o_box__4)).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).box())).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).unbox())).hashCode())));
        Assert.assertEquals("java.lang.Void", reflectionName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("Void", simpleName());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).box())).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_box__4)).unbox())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName) (o_box__4)).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isPrimitive());
    }

    @Test(timeout = 10000)
    public void getErrorType() throws Exception {
        ErrorType errorType = new AmplAbstractTypesTest.DeclaredTypeAsErrorType(getTypes().getDeclaredType(getElement(Set.class)));
        ClassName o_getErrorType__6 = ClassName.get(Set.class);
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getErrorType__6)).box())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Set", simpleName());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).hashCode())));
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getErrorType__6)).box())).box())).toString());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertEquals(83041, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.ClassName) (o_getErrorType__6)).toString());
        Assert.assertEquals("java.util.Set", reflectionName());
        Assert.assertEquals("Set", simpleName());
        Assert.assertEquals("java.util.Set", reflectionName());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util", packageName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.ClassName) (o_getErrorType__6)).hashCode())));
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("Set", simpleName());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals(83041, ((int) (((List) (simpleNames())).hashCode())));
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals("java.util.Set", reflectionName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getErrorType__6)).box())).box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(((List) (simpleNames())).isEmpty());
        Assert.assertEquals((-1383343454), ((int) (((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (topLevelClassName())).box())).hashCode())));
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName) (((com.squareup.javapoet.ClassName) (o_getErrorType__6)).box())).toString());
        Assert.assertFalse(isAnnotated());
        Assert.assertEquals("java.util", packageName());
        Assert.assertEquals(1, ((int) (((List) (simpleNames())).size())));
        Assert.assertFalse(isBoxedPrimitive());
    }
}

