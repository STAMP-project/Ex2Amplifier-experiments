package com.squareup.javapoet;


import com.google.testing.compile.CompilationRule;
import javax.lang.model.element.TypeElement;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;


@RunWith(JUnit4.class)
public final class AmplTypeSpecTest {
    private final String tacosPackage = "com.squareup.tacos";

    private static final String donutsPackage = "com.squareup.donuts";

    @Rule
    public final CompilationRule compilation = new CompilationRule();

    private TypeElement getElement(Class<?> clazz) {
        return compilation.getElements().getTypeElement(clazz.getCanonicalName());
    }

    private String toString(TypeSpec typeSpec) {
        return build().toString();
    }

    @Test(timeout = 120000)
    public void annotationsAndJavaLangTypes() throws Exception {
        ClassName freeRange = ClassName.get("javax.annotation", "FreeRange");
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (freeRange)).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (freeRange)).hashCode())));
        Assert.assertFalse(isPrimitive());
        TypeSpec taco = TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(build()), "meat").build();
        Assert.assertEquals("class EthicalTaco {\n  @javax.annotation.FreeRange java.lang.String meat;\n}\n", ((com.squareup.javapoet.TypeSpec) (build())).toString());
        Assert.assertEquals(1333329772, ((int) (((com.squareup.javapoet.TypeSpec) (build())).hashCode())));
        Assert.assertEquals("class EthicalTaco {\n  @javax.annotation.FreeRange java.lang.String meat;\n}\n", ((com.squareup.javapoet.TypeSpec) (taco)).toString());
        Assert.assertEquals(1333329772, ((int) (((com.squareup.javapoet.TypeSpec) (taco)).hashCode())));
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("FreeRange", simpleName());
        Assert.assertEquals("javax.annotation", packageName());
        Assert.assertNull(enclosingClassName());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (topLevelClassName())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (topLevelClassName())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", reflectionName());
        Assert.assertFalse(simpleNames().isEmpty());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (withoutAnnotations())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (withoutAnnotations())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertFalse(isAnnotated());
        Assert.assertFalse(isBoxedPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.TypeName) (box())).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.TypeName) (box())).hashCode())));
        Assert.assertFalse(isPrimitive());
        Assert.assertEquals("javax.annotation.FreeRange", ((com.squareup.javapoet.ClassName) (freeRange)).toString());
        Assert.assertEquals(111796842, ((int) (((com.squareup.javapoet.ClassName) (freeRange)).hashCode())));
        Assert.assertFalse(isPrimitive());
    }
}

