package com.squareup.javapoet;


import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.TypeParameterElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.ErrorType;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.type.TypeVisitor;
import javax.lang.model.type.WildcardType;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import org.junit.Assert;
import org.junit.Test;


public abstract class AmplAbstractTypesTest {
    static class Parameterized<Simple, ExtendsClass extends Number, ExtendsInterface extends Runnable, ExtendsTypeVariable extends Simple, Intersection extends Number & Runnable, IntersectionOfInterfaces extends Runnable & Serializable> {}

    static class Recursive<T extends Map<List<T>, Set<T[]>>> {}

    private static class DeclaredTypeAsErrorType implements ErrorType {
        private final DeclaredType declaredType;

        public DeclaredTypeAsErrorType(DeclaredType declaredType) {
            this.declaredType = declaredType;
        }

        @Override
        public Element asElement() {
            return declaredType.asElement();
        }

        @Override
        public TypeMirror getEnclosingType() {
            return declaredType.getEnclosingType();
        }

        @Override
        public List<? extends TypeMirror> getTypeArguments() {
            return declaredType.getTypeArguments();
        }

        @Override
        public TypeKind getKind() {
            return declaredType.getKind();
        }

        @Override
        public <R, P> R accept(TypeVisitor<R, P> typeVisitor, P p) {
            return typeVisitor.visitError(this, p);
        }

        public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {
            throw new UnsupportedOperationException();
        }

        public <A extends Annotation> A getAnnotation(Class<A> annotationType) {
            throw new UnsupportedOperationException();
        }

        public List<? extends AnnotationMirror> getAnnotationMirrors() {
            throw new UnsupportedOperationException();
        }
    }

    protected abstract Elements getElements();

    protected abstract Types getTypes();

    private TypeElement getElement(Class<?> clazz) {
        return getElements().getTypeElement(clazz.getCanonicalName());
    }

    private TypeMirror getMirror(Class<?> clazz) {
        return getElement(clazz).asType();
    }

    @Test(timeout = 10000)
    public void typeVariable() throws Exception {
        TypeVariableName type = TypeVariableName.get("T", CharSequence.class);
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)type).isBoxedPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).withoutAnnotations()).toString());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).isPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)type).isAnnotated());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).isAnnotated());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).isBoxedPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeVariableName)type).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)type).box()).box()).isAnnotated());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeVariableName)type).toString());
    }

    @Test(timeout = 10000)
    public void wildcardSuperType() throws Exception {
        WildcardTypeName type = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isPrimitive());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).toString());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isAnnotated());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.WildcardTypeName)type).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.WildcardTypeName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).toString());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).hashCode())));
    }

    @Test(timeout = 10000)
    public void wildcardMirrorExtendsType() throws Exception {
        Types types = getTypes();
        Elements elements = getElements();
        TypeMirror charSequence = elements.getTypeElement(CharSequence.class.getName()).asType();
        WildcardType wildcard = types.getWildcardType(charSequence, null);
        TypeName type = TypeName.get(wildcard);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isPrimitive());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).toString());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isAnnotated());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.WildcardTypeName)type).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.WildcardTypeName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).toString());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isAnnotated());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).hashCode())));
    }

    @Test(timeout = 10000)
    public void arrayType() throws Exception {
        ArrayTypeName type = ArrayTypeName.of(String.class);
        Assert.assertEquals("java.lang.String[]", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(1888107655, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(1888107655, ((int) (((com.squareup.javapoet.ArrayTypeName)type).hashCode())));
        Assert.assertEquals("java.lang.String[]", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ArrayTypeName)type).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ArrayTypeName)type).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).box()).isAnnotated());
        Assert.assertEquals("java.lang.String[]", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals(1888107655, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals("java.lang.String[]", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.String[]", ((com.squareup.javapoet.ArrayTypeName)type).toString());
        Assert.assertEquals(1888107655, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).isAnnotated());
        Assert.assertEquals("java.lang.String[]", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).box()).isPrimitive());
        Assert.assertEquals(1888107655, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ArrayTypeName)type).isPrimitive());
        Assert.assertEquals(1888107655, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals(1888107655, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.String[]", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ArrayTypeName)type).withoutAnnotations()).toString());
    }

    @Test(timeout = 10000)
    public void wildcardMirrorSuperType() throws Exception {
        Types types = getTypes();
        Elements elements = getElements();
        TypeMirror string = elements.getTypeElement(String.class.getName()).asType();
        WildcardType wildcard = types.getWildcardType(null, string);
        TypeName type = TypeName.get(wildcard);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isPrimitive());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).toString());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isAnnotated());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.WildcardTypeName)type).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.WildcardTypeName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).toString());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(-620274325, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).hashCode())));
    }

    @Test(timeout = 10000)
    public void parameterizedType() throws Exception {
        ParameterizedTypeName type = ParameterizedTypeName.get(Map.class, String.class, Long.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(1148293269, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(1148293269, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(1148293269, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals("java.util.Map<java.lang.String, java.lang.Long>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isAnnotated());
        Assert.assertEquals("java.util.Map<java.lang.String, java.lang.Long>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isAnnotated());
        Assert.assertEquals("java.util.Map<java.lang.String, java.lang.Long>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).toString());
        Assert.assertEquals(1148293269, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("java.util.Map<java.lang.String, java.lang.Long>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertEquals("java.util.Map<java.lang.String, java.lang.Long>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).isPrimitive());
        Assert.assertEquals("java.util.Map<java.lang.String, java.lang.Long>", ((com.squareup.javapoet.ParameterizedTypeName)type).toString());
        Assert.assertEquals(1148293269, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(1148293269, ((int) (((com.squareup.javapoet.ParameterizedTypeName)type).hashCode())));
        Assert.assertEquals(1148293269, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.util.Map<java.lang.String, java.lang.Long>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void box() throws Exception {
        ClassName o_box__1 = ClassName.get(Integer.class);
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).hashCode())));
        Assert.assertEquals("Integer", ((com.squareup.javapoet.ClassName)o_box__1).simpleName());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__1).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_box__1).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.ClassName)o_box__1).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName)o_box__1).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__1).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).isAnnotated());
        ClassName o_box__2 = ClassName.get(Void.class);
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__2).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__2).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__2).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName)o_box__2).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("Void", ((com.squareup.javapoet.ClassName)o_box__2).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName)o_box__2).toString());
        ClassName o_box__3 = ClassName.get(Integer.class);
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_box__3).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Integer", ((com.squareup.javapoet.ClassName)o_box__3).simpleName());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__3).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__3).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.ClassName)o_box__3).hashCode())));
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName)o_box__3).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).isBoxedPrimitive());
        ClassName o_box__4 = ClassName.get(Void.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__4).isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName)o_box__4).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__4).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__4).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).isBoxedPrimitive());
        Assert.assertEquals("Void", ((com.squareup.javapoet.ClassName)o_box__4).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName)o_box__4).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).isPrimitive());
        ClassName o_box__5 = ClassName.get(String.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.ClassName)o_box__5).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("String", ((com.squareup.javapoet.ClassName)o_box__5).simpleName());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__5).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__5).isPrimitive());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).box()).isPrimitive());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).withoutAnnotations()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__5).isAnnotated());
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).toString());
        Assert.assertEquals(1195259493, ((int) (((com.squareup.javapoet.ClassName)o_box__5).hashCode())));
        Assert.assertEquals("java.lang.String", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__5).box()).box()).isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).hashCode())));
        Assert.assertEquals("Integer", ((com.squareup.javapoet.ClassName)o_box__1).simpleName());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__1).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_box__1).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).box()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.ClassName)o_box__1).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).box()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName)o_box__1).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__1).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__1).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__4).isPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName)o_box__4).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__4).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).box()).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__4).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).isBoxedPrimitive());
        Assert.assertEquals("Void", ((com.squareup.javapoet.ClassName)o_box__4).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).box()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).unbox()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName)o_box__4).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__4).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.ClassName)o_box__3).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Integer", ((com.squareup.javapoet.ClassName)o_box__3).simpleName());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__3).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__3).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.ClassName)o_box__3).hashCode())));
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).hashCode())));
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).box()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.ClassName)o_box__3).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__3).box()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__2).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__2).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_box__2).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).box()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.ClassName)o_box__2).hashCode())));
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("Void", ((com.squareup.javapoet.ClassName)o_box__2).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_box__2).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.ClassName)o_box__2).toString());
    }

    @Test(timeout = 10000)
    public void getTypeVariableTypeMirror() throws Exception {
        List<? extends TypeParameterElement> typeVariables = getElement(AmplAbstractTypesTest.Parameterized.class).getTypeParameters();
        ClassName number = ClassName.get(Number.class);
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).hashCode())));
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName)number).hashCode())));
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName)number).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)number).isPrimitive());
        Assert.assertEquals("Number", ((com.squareup.javapoet.ClassName)number).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)number).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)number).isAnnotated());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).hashCode())));
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).isAnnotated());
        ClassName runnable = ClassName.get(Runnable.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)runnable).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName)runnable).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).hashCode())));
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)runnable).isPrimitive());
        Assert.assertEquals("Runnable", ((com.squareup.javapoet.ClassName)runnable).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName)runnable).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)runnable).isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).isPrimitive());
        ClassName serializable = ClassName.get(Serializable.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).hashCode())));
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).hashCode())));
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Serializable", ((com.squareup.javapoet.ClassName)serializable).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)serializable).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName)serializable).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)serializable).isBoxedPrimitive());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).isBoxedPrimitive());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName)serializable).hashCode())));
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)serializable).isPrimitive());
        TypeVariableName o_getTypeVariableTypeMirror__11 = TypeVariableName.get("Simple");
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).isBoxedPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).hashCode())));
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).isPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).hashCode())));
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).hashCode())));
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).toString());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).isBoxedPrimitive());
        TypeVariableName o_getTypeVariableTypeMirror__12 = TypeVariableName.get("ExtendsClass", number);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).hashCode())));
        TypeVariableName o_getTypeVariableTypeMirror__13 = TypeVariableName.get("ExtendsInterface", runnable);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).isPrimitive());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).isPrimitive());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).isBoxedPrimitive());
        TypeVariableName o_getTypeVariableTypeMirror__14 = TypeVariableName.get("ExtendsTypeVariable", TypeVariableName.get("Simple"));
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).toString());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).isPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).isAnnotated());
        TypeVariableName o_getTypeVariableTypeMirror__16 = TypeVariableName.get("Intersection", number, runnable);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).isPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).isPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).hashCode())));
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).toString());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).isBoxedPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).toString());
        TypeVariableName o_getTypeVariableTypeMirror__17 = TypeVariableName.get("IntersectionOfInterfaces", runnable, serializable);
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).toString());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).box()).hashCode())));
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).isAnnotated());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).isBoxedPrimitive());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).isPrimitive());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).box()).isPrimitive());
        Assert.assertEquals(982982874, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("IntersectionOfInterfaces", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__17).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)runnable).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.ClassName)runnable).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).hashCode())));
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)runnable).isPrimitive());
        Assert.assertEquals("Runnable", ((com.squareup.javapoet.ClassName)runnable).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.ClassName)runnable).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)runnable).isAnnotated());
        Assert.assertEquals("java.lang.Runnable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).toString());
        Assert.assertEquals(922510449, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)runnable).box()).isPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).toString());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).isPrimitive());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).isAnnotated());
        Assert.assertEquals("ExtendsTypeVariable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).isAnnotated());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(427626223, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__14).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).isBoxedPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).hashCode())));
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).isPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).hashCode())));
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).hashCode())));
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).box()).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Simple", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).toString());
        Assert.assertEquals(-1818419758, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__11).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).isAnnotated());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).hashCode())));
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).hashCode())));
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Serializable", ((com.squareup.javapoet.ClassName)serializable).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)serializable).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.ClassName)serializable).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)serializable).isBoxedPrimitive());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).isBoxedPrimitive());
        Assert.assertEquals(1832181019, ((int) (((com.squareup.javapoet.ClassName)serializable).hashCode())));
        Assert.assertEquals("java.io.Serializable", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)serializable).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)serializable).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).toString());
        Assert.assertEquals("ExtendsClass", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).isBoxedPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).box()).box()).isPrimitive());
        Assert.assertEquals(590143615, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__12).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).hashCode())));
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.ClassName)number).hashCode())));
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).toString());
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.ClassName)number).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)number).isPrimitive());
        Assert.assertEquals("Number", ((com.squareup.javapoet.ClassName)number).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).isPrimitive());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)number).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)number).isAnnotated());
        Assert.assertEquals(1052881309, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).hashCode())));
        Assert.assertEquals("java.lang.Number", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)number).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).isPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).isPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).hashCode())));
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).toString());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).box()).isAnnotated());
        Assert.assertEquals(334069417, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).isBoxedPrimitive());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).withoutAnnotations()).toString());
        Assert.assertEquals("Intersection", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__16).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).isPrimitive());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).hashCode())));
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).box()).isPrimitive());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).isBoxedPrimitive());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).isAnnotated());
        Assert.assertEquals(661375168, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("ExtendsInterface", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)o_getTypeVariableTypeMirror__13).box()).withoutAnnotations()).isBoxedPrimitive());
    }

    @Test(timeout = 10000)
    public void getBasicTypeMirror() throws Exception {
        ClassName o_getBasicTypeMirror__1 = ClassName.get(Object.class);
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).isAnnotated());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).isPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).toString());
        Assert.assertEquals("Object", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).isAnnotated());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).isAnnotated());
        ClassName o_getBasicTypeMirror__2 = ClassName.get(Charset.class);
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).isPrimitive());
        Assert.assertEquals("Charset", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).hashCode())));
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).isAnnotated());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).isPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).toString());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).toString());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).isAnnotated());
        ClassName o_getBasicTypeMirror__3 = ClassName.get(AmplAbstractTypesTest.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).box()).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).isAnnotated());
        Assert.assertEquals("AbstractTypesTest", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).box()).isAnnotated());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).toString());
        Assert.assertEquals(2035865972, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__3).toString());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).isAnnotated());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).isPrimitive());
        Assert.assertEquals(1063877011, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).isPrimitive());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).toString());
        Assert.assertEquals("Object", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).isAnnotated());
        Assert.assertEquals("java.lang.Object", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__1).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).isPrimitive());
        Assert.assertEquals("Charset", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).isBoxedPrimitive());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).hashCode())));
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).isAnnotated());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).isPrimitive());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).toString());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).box()).isAnnotated());
        Assert.assertEquals("java.nio.charset.Charset", ((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).toString());
        Assert.assertEquals(1479543012, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getBasicTypeMirror__2).box()).withoutAnnotations()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void unbox() throws Exception {
        TypeName o_unbox__1 = TypeName.INT.unbox();
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)o_unbox__1).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)o_unbox__1).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__1).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)o_unbox__1).isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__1).isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        TypeName o_unbox__2 = TypeName.VOID.unbox();
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)o_unbox__2).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__2).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__2).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__2).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)o_unbox__2).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).isPrimitive());
        TypeName o_unbox__3 = TypeName.INT.unbox();
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)o_unbox__3).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).isBoxedPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)o_unbox__3).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__3).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)o_unbox__3).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__3).isBoxedPrimitive());
        TypeName o_unbox__4 = TypeName.VOID.unbox();
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)o_unbox__4).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__4).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__4).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__4).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)o_unbox__4).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).toString());
        try {
            TypeName.OBJECT.unbox();
        } catch (UnsupportedOperationException expected) {
        }
        try {
            ClassName.get(String.class).unbox();
        } catch (UnsupportedOperationException expected) {
        }
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)o_unbox__4).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__4).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__4).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__4).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).isAnnotated());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).isAnnotated());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)o_unbox__4).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).box()).box()).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__4).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)o_unbox__3).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).isBoxedPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)o_unbox__3).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__3).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).isPrimitive());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)o_unbox__3).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__3).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__3).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)o_unbox__2).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__2).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__2).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).hashCode())));
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__2).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).toString());
        Assert.assertEquals(399092968, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)o_unbox__2).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).toString());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).unbox()).toString());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("void", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertEquals(3625364, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).box()).withoutAnnotations()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__2).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)o_unbox__1).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).hashCode())));
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).toString());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).isAnnotated());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)o_unbox__1).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).isPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).toString());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).isBoxedPrimitive());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).toString());
        Assert.assertEquals(-2056817302, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).hashCode())));
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__1).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)o_unbox__1).isPrimitive());
        Assert.assertEquals("java.lang.Integer", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).toString());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).box()).isPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).hashCode())));
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)o_unbox__1).isAnnotated());
        Assert.assertEquals("int", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).isAnnotated());
        Assert.assertTrue(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).unbox()).isPrimitive());
        Assert.assertEquals(104431, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).box()).unbox()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).unbox()).unbox()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)o_unbox__1).withoutAnnotations()).withoutAnnotations()).isAnnotated());
    }

    @Test(timeout = 10000)
    public void wildcardMirrorNoBounds() throws Exception {
        WildcardType wildcard = getTypes().getWildcardType(null, null);
        TypeName type = TypeName.get(wildcard);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isPrimitive());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).toString());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isAnnotated());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.WildcardTypeName)type).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("?", ((com.squareup.javapoet.WildcardTypeName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).toString());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isAnnotated());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).hashCode())));
    }

    @Test(timeout = 10000)
    public void wildcardExtendsObject() throws Exception {
        WildcardTypeName type = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isPrimitive());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).toString());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isAnnotated());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.WildcardTypeName)type).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("?", ((com.squareup.javapoet.WildcardTypeName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).toString());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isAnnotated());
        Assert.assertEquals("?", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(63, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).hashCode())));
    }

    @Test(timeout = 10000)
    public void getParameterizedTypeMirror() throws Exception {
        DeclaredType setType = getTypes().getDeclaredType(getElement(Set.class), getMirror(Object.class));
        ParameterizedTypeName o_getParameterizedTypeMirror__6 = ParameterizedTypeName.get(ClassName.get(Set.class), ClassName.OBJECT);
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).box()).isPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).isPrimitive());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).isBoxedPrimitive());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).box()).isAnnotated());
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).isAnnotated());
        Assert.assertEquals(2110910065, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals("java.util.Set<java.lang.Object>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)o_getParameterizedTypeMirror__6).box()).withoutAnnotations()).toString());
    }

    @Test(timeout = 10000)
    public void getTypeVariableTypeMirrorRecursive() throws Exception {
        TypeMirror typeMirror = getElement(AmplAbstractTypesTest.Recursive.class).asType();
        ParameterizedTypeName typeName = ((ParameterizedTypeName) (TypeName.get(typeMirror)));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).toString());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.ParameterizedTypeName)typeName).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)typeName).isPrimitive());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.ParameterizedTypeName)typeName).toString());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).toString());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)typeName).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)typeName).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).toString());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).toString());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).isAnnotated());
        String className = AmplAbstractTypesTest.Recursive.class.getCanonicalName();
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive", className);
        String String_0 = className + "<T>";
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", String_0);
        TypeVariableName typeVariableName = ((TypeVariableName) (typeName.typeArguments.get(0)));
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).hashCode())));
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)typeVariableName).isPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).hashCode())));
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)typeVariableName).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).isPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeVariableName)typeVariableName).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).toString());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeVariableName)typeVariableName).hashCode())));
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)typeVariableName).isBoxedPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).isBoxedPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).toString());
        try {
            typeVariableName.bounds.set(0, null);
        } catch (UnsupportedOperationException expected) {
        }
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).toString());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.ParameterizedTypeName)typeName).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)typeName).isPrimitive());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.ParameterizedTypeName)typeName).toString());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).toString());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).hashCode())));
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)typeName).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ParameterizedTypeName)typeName).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).toString());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).toString());
        Assert.assertEquals(-638163826, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ParameterizedTypeName)typeName).box()).box()).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive<T>", String_0);
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).hashCode())));
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)typeVariableName).isPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).hashCode())));
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)typeVariableName).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).isPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeVariableName)typeVariableName).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).toString());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).isBoxedPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeVariableName)typeVariableName).hashCode())));
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeVariableName)typeVariableName).isBoxedPrimitive());
        Assert.assertEquals(84, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).isBoxedPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).box()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("T", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeVariableName)typeVariableName).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("com.squareup.javapoet.AbstractTypesTest.Recursive", className);
    }

    @Test(timeout = 10000)
    public void wildcardExtendsType() throws Exception {
        WildcardTypeName type = WildcardTypeName.subtypeOf(CharSequence.class);
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isPrimitive());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).toString());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).toString());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isPrimitive());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isAnnotated());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.WildcardTypeName)type).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isAnnotated());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.WildcardTypeName)type).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isBoxedPrimitive());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).toString());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).isAnnotated());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isAnnotated());
        Assert.assertEquals("? extends java.lang.CharSequence", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).toString());
        Assert.assertFalse(((com.squareup.javapoet.WildcardTypeName)type).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).withoutAnnotations()).withoutAnnotations()).hashCode())));
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).box()).hashCode())));
        Assert.assertEquals(672409587, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.WildcardTypeName)type).box()).withoutAnnotations()).hashCode())));
    }

    @Test(timeout = 10000)
    public void getErrorType() throws Exception {
        ErrorType errorType = new AmplAbstractTypesTest.DeclaredTypeAsErrorType(getTypes().getDeclaredType(getElement(Set.class)));
        ClassName o_getErrorType__6 = ClassName.get(Set.class);
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).withoutAnnotations()).toString());
        Assert.assertEquals(-1383343454, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getErrorType__6).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).box()).isPrimitive());
        Assert.assertEquals(-1383343454, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).box()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).withoutAnnotations()).isBoxedPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).withoutAnnotations()).isPrimitive());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).box()).toString());
        Assert.assertEquals(-1383343454, ((int) (((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).withoutAnnotations()).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).isBoxedPrimitive());
        Assert.assertEquals(-1383343454, ((int) (((com.squareup.javapoet.ClassName)o_getErrorType__6).hashCode())));
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getErrorType__6).isAnnotated());
        Assert.assertEquals("Set", ((com.squareup.javapoet.ClassName)o_getErrorType__6).simpleName());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).box()).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.ClassName)o_getErrorType__6).toString());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).withoutAnnotations()).isAnnotated());
        Assert.assertFalse(((com.squareup.javapoet.ClassName)o_getErrorType__6).isPrimitive());
        Assert.assertFalse(((com.squareup.javapoet.TypeName)((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).box()).isAnnotated());
        Assert.assertEquals("java.util.Set", ((com.squareup.javapoet.TypeName)((com.squareup.javapoet.ClassName)o_getErrorType__6).box()).toString());
    }
}

