SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/bdanglot/.m2/repository/eu/stamp-project/test-runner/1.0.5/test-runner-1.0.5-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/bdanglot/.m2/repository/org/slf4j/slf4j-log4j12/1.7.25/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
[0] WARN AutomaticBuilderFactory - No automatic builder specified in configuration, going to default.
[0] INFO AutomaticBuilderFactory - Default: provided Maven automatic builder.
[21] INFO MavenAutomaticBuilder - run maven clean test -DskipTests dependency:build-classpath -Dmdep.outputFile=target/dspot/classpath
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1mBuilding JavaPoet 1.11.0-SNAPSHOT[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Deleting /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-enforcer-plugin:1.0:enforce[m [1m(enforce-maven)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Skipping Rule Enforcement.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/src/main/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.7.0:compile[m [1m(default-compile)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 17 source files to /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.7.0:testCompile[m [1m(default-testCompile)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 19 source files to /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/test-classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.12.4:test[m [1m(default-test)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Tests are skipped.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-dependency-plugin:2.8:build-classpath[m [1m(default-cli)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Wrote classpath file '/home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/dspot/classpath'.
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time: 12.038 s
[[1;34mINFO[m] Finished at: 2018-05-16T15:02:28+02:00
[[1;34mINFO[m] Final Memory: 46M/460M
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[17437] ERROR JDTCommentBuilder - // @Target(ElementType.TYPE_USE) requires Java 1.8 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/src/test/java/com/squareup/javapoet/AnnotatedTypeNameTest.java:118)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:340)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:474)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:152)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:108)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:417)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:362)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:335)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:116)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:99)
	at spoon.Launcher.buildModel(Launcher.java:724)
	at fr.inria.diversify.utils.compilation.DSpotCompiler.getSpoonModelOf(DSpotCompiler.java:106)
	at fr.inria.diversify.utils.compilation.DSpotCompiler.createDSpotCompiler(DSpotCompiler.java:31)
	at fr.inria.diversify.dspot.DSpot.<init>(DSpot.java:103)
	at eu.stamp.project.Main.lambda$run$2(Main.java:134)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[18407] WARN AutomaticBuilderFactory - No automatic builder specified in configuration, going to default.
[18407] INFO AutomaticBuilderFactory - Default: provided Maven automatic builder.
[18407] INFO MavenAutomaticBuilder - run maven clean test -DskipTests dependency:build-classpath -Dmdep.outputFile=target/dspot/classpath
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1mBuilding JavaPoet 1.11.0-SNAPSHOT[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Deleting /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-enforcer-plugin:1.0:enforce[m [1m(enforce-maven)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Skipping Rule Enforcement.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608/src/main/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.7.0:compile[m [1m(default-compile)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 17 source files to /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608/target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.7.0:testCompile[m [1m(default-testCompile)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 19 source files to /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608/target/test-classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.12.4:test[m [1m(default-test)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Tests are skipped.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-dependency-plugin:2.8:build-classpath[m [1m(default-cli)[m @ [36mjavapoet[0;1m ---[m
[[1;34mINFO[m] Wrote classpath file '/home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608/target/dspot/classpath'.
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time: 11.730 s
[[1;34mINFO[m] Finished at: 2018-05-16T15:02:45+02:00
[[1;34mINFO[m] Final Memory: 45M/351M
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[32182] INFO SelectorOnDiff - Selecting according to a diff between dataset/may-2018/javapoet/608_modified/ and dataset/may-2018/javapoet/608/ (c2c770c9260819e14ea3154ca7e4000a24d15995)
[32195] INFO SelectorOnDiff - Modified files:
a/src/main/java/com/squareup/javapoet/LineWrapper.java
a/src/test/java/com/squareup/javapoet/LineWrapperTest.java
[33470] INFO SelectorOnDiff - Select 1 modified test methods
[34148] INFO SelectorOnDiff - Select 1 test methods that execute directly modified methods
[34218] INFO Amplification - amplification of com.squareup.javapoet.LineWrapperTest (6 test(s))
[34914] INFO Amplification - Try to add assertions before amplification
[34984] INFO AssertGenerator - Run tests. (6)
[35527] INFO AssertGenerator - 6 test pass, generating assertion...
[35538] INFO MethodsAssertGenerator - Add observations points in passing tests.
[35539] INFO MethodsAssertGenerator - Instrumentation...
 16% |======== ]/ 33% |================ ]- 50% |========================= ]\ 66% |================================= ]| 83% |========================================= ]/100% |================================================== ]-
[35585] INFO MethodsAssertGenerator - Run instrumented tests. (18)
[36452] INFO MethodsAssertGenerator - Generating assertions...
[36458] INFO AssertGenerator - Could not generate any test with assertions
[36458] INFO Amplification - 0 amplified test(s) has been selected, global: 0
[36459] INFO Amplification - amp overlyLongLinesWithLeadingZeroWidth (1/6)
[36946] INFO Amplification - iteration 0:
[36946] INFO Amplification - 1 tests selected to be amplified over 1 available tests
[36946] INFO Amplification - Amplification of inputs...
100% |================================================== ]/
[36994] DEBUG Launcher - building sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[36995] DEBUG Launcher - build args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -1.8, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[37086] DEBUG Launcher - built in 92 ms
[37087] DEBUG Launcher - building templates: []
[37087] DEBUG Launcher - built in 0 ms
[37087] DEBUG Launcher - model built in 93
[37088] DEBUG Launcher - compiling sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[37090] DEBUG Launcher - compile args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -d, /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/test-classes, -1.8, -proc:none, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[37181] DEBUG Launcher - compiled in 93 ms
This is the Java Bytecode Symbolic Executor's Run Tool (JBSE v.0.8.0-SNAPSHOT).
Connecting to Z3 at lib/z3/build/bin/z3.
Starting symbolic execution of method com/squareup/javapoet/LineWrapperTest:(II)V:extract_overlyLongLinesWithLeadingZeroWidth at Wed May 16 15:02:51 CEST 2018.
.1[442] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System)
	where:
	{R0} == {ROOT}:this
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 12 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijkl    "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 12 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 12
		Items: {"abcdefghijkl"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 306089158 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 12 (type: I)
	}
}

.1 trace is safe.
Symbolic execution finished at Wed May 16 15:02:51 CEST 2018.
Analyzed states: 442, Analyzed traces: 1, Safe: 1, Unsafe: 0, Out of scope: 0, Violating assumptions: 0, Unmanageable: 0.
Elapsed time: 122 msec, Average speed: 3622 states/sec, Elapsed time in decision procedure: 2 msec (1.64% of total).
[37696] INFO Amplification - 0 new tests generated
[37696] INFO Amplification - 0 amplified test(s) has been selected, global: 0
[37696] INFO Amplification - amp fencepostZeroWidth (2/6)
[37703] DEBUG Launcher - printing com.squareup.javapoet.LineWrapperTest to /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources
[38160] INFO Amplification - iteration 0:
[38160] INFO Amplification - 1 tests selected to be amplified over 1 available tests
[38160] INFO Amplification - Amplification of inputs...
100% |================================================== ]/
[38176] DEBUG Launcher - printing com.squareup.javapoet.LineWrapperTest to /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources
[38201] DEBUG Launcher - building sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[38201] DEBUG Launcher - build args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -1.8, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[38256] DEBUG Launcher - built in 55 ms
[38256] DEBUG Launcher - building templates: []
[38256] DEBUG Launcher - built in 0 ms
[38257] DEBUG Launcher - model built in 56
[38257] DEBUG Launcher - compiling sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[38259] DEBUG Launcher - compile args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -d, /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/test-classes, -1.8, -proc:none, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[38324] DEBUG Launcher - compiled in 67 ms
This is the Java Bytecode Symbolic Executor's Run Tool (JBSE v.0.8.0-SNAPSHOT).
Connecting to Z3 at lib/z3/build/bin/z3.
Starting symbolic execution of method com/squareup/javapoet/LineWrapperTest:(II)V:extract_fencepostZeroWidth at Wed May 16 15:02:52 CEST 2018.
.1.1.1.1.1.1[4] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"klmnop          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[34] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[41], Object[48], Object[51]}
	}
	Object[35]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[41]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[36] (type: L)
	}
	Object[42]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[46]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[48]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
	Object[49]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[50]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[49] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[51]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[50] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
}

.1.1.1.1.1.1 trace is safe.
.1.1.1.1.1.2[4] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"klmnop          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[34] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[41], Object[48], Object[51]}
	}
	Object[35]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[41]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[36] (type: L)
	}
	Object[42]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[46]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[48]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
	Object[49]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[50]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[49] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[51]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[50] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
}

.1.1.1.1.1.2 trace is safe.
.1.1.1.1.1.3[352] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 3
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijklmnop"}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"klmnop          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
}

.1.1.1.1.1.3 trace is safe.
.1.1.1.1.1.4[344] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[43] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[41] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[42] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[46] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"klmnop          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[33] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[49] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[1]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[36]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[37]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[36] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[38]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: EMPTY          "}
	}
	Object[39]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[41]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[42]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[43]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[44]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[46]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 24
		Items: {"Unknown FlushType: EMPTY"}
	}
	Object[49]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[56], Object[63], Object[66]}
	}
	Object[50]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[52]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[53]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[52] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[54]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[55]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[54] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[56]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[53] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[55] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[51] (type: L)
	}
	Object[57]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[59]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[60]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[59] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[61]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[62]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[61] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[63]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[60] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[62] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[58] (type: L)
	}
	Object[64]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[65]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[64] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[66]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[60] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[65] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[58] (type: L)
	}
}

.1.1.1.1.1.4 trace is safe.
.1.1.1.1.2[0] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	2 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"klmnop          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[34] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[41], Object[48], Object[51]}
	}
	Object[35]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[41]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[36] (type: L)
	}
	Object[42]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[46]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[48]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
	Object[49]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[50]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[49] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[51]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[50] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
}

.1.1.1.1.2 trace is safe.
.1.1.1.2[6] 
Leaf state, raised exception: Object[32]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"klmnop          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[33] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[33]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[40], Object[47], Object[50]}
	}
	Object[34]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[36]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[37]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[36] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[38]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[40]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[37] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[39] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[35] (type: L)
	}
	Object[41]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[43]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[44]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[43] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[44] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[42] (type: L)
	}
	Object[48]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[50]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[44] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[42] (type: L)
	}
}

.1.1.1.2 trace is safe.
.1.1.2.1.1.1[4] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"k               "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[34] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[41], Object[48], Object[51]}
	}
	Object[35]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[41]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[36] (type: L)
	}
	Object[42]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[46]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[48]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
	Object[49]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[50]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[49] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[51]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[50] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
}

.1.1.2.1.1.1 trace is safe.
.1.1.2.1.1.2[4] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"k               "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[34] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[41], Object[48], Object[51]}
	}
	Object[35]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[41]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[36] (type: L)
	}
	Object[42]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[46]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[48]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
	Object[49]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[50]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[49] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[51]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[50] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
}

.1.1.2.1.1.2 trace is safe.
.1.1.2.1.1.3[371] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 3
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijklmnop"}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"k               "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
}

.1.1.2.1.1.3 trace is safe.
.1.1.2.1.1.4[344] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[43] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[41] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[42] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[46] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"k               "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[33] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[49] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[1]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[36]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[37]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[36] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[38]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: WRAP           "}
	}
	Object[39]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[41]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[42]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[43]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[44]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[46]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 23
		Items: {"Unknown FlushType: WRAP"}
	}
	Object[49]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[56], Object[63], Object[66]}
	}
	Object[50]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[52]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[53]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[52] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[54]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[55]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[54] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[56]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[53] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[55] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[51] (type: L)
	}
	Object[57]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[59]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[60]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[59] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[61]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[62]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[61] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[63]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[60] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[62] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[58] (type: L)
	}
	Object[64]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[65]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[64] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[66]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[60] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[65] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[58] (type: L)
	}
}

.1.1.2.1.1.4 trace is safe.
.1.1.2.1.2[0] 
Leaf state, raised exception: Object[33]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[32] (fresh) &&
	{V9} >= 0 &&
	0 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[32] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"k               "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[33]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[34] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[34]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[41], Object[48], Object[51]}
	}
	Object[35]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[41]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[36] (type: L)
	}
	Object[42]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[46]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[48]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
	Object[49]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[50]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[49] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[51]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[50] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[43] (type: L)
	}
}

.1.1.2.1.2 trace is safe.
.1.1.2.2[6] 
Leaf state, raised exception: Object[32]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	16 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"k               "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[32]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[33] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[33]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[40], Object[47], Object[50]}
	}
	Object[34]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[36]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[37]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[36] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[38]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[40]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[37] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[39] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[35] (type: L)
	}
	Object[41]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[43]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[44]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[43] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[45]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[44] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[42] (type: L)
	}
	Object[48]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[50]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[44] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[42] (type: L)
	}
}

.1.1.2.2 trace is safe.
.1.2.1.1.1[4] 
Leaf state, raised exception: Object[31]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[30] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[30] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[31]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[32] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[32]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[39], Object[46], Object[49]}
	}
	Object[33]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[39]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[34] (type: L)
	}
	Object[40]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[41] (type: L)
	}
	Object[47]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[48]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[47] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[49]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[48] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[41] (type: L)
	}
}

.1.2.1.1.1 trace is safe.
.1.2.1.1.2[4] 
Leaf state, raised exception: Object[31]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[30] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[30] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[31]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[32] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[32]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[39], Object[46], Object[49]}
	}
	Object[33]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[39]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[34] (type: L)
	}
	Object[40]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[41] (type: L)
	}
	Object[47]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[48]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[47] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[49]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[48] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[41] (type: L)
	}
}

.1.2.1.1.2 trace is safe.
.1.2.1.1.3[449] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[30] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 3
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[30] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijklmnop"}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[31]: {
		Type: [C
		Length: 5
		Items: {"lmnop"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 103096750 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
}

.1.2.1.1.3 trace is safe.
.1.2.1.1.4[344] 
Leaf state, raised exception: Object[31]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[30] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[41] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[39] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[40] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[44] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[30] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[31]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[31] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[47] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[32]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[36] (type: L)
		Field[1]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[34]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[36]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: WRAP           "}
	}
	Object[37]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[39]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[40]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[41]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[46]: {
		Type: [C
		Length: 23
		Items: {"Unknown FlushType: WRAP"}
	}
	Object[47]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[54], Object[61], Object[64]}
	}
	Object[48]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[52]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[53]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[52] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[54]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[53] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[49] (type: L)
	}
	Object[55]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[59]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[60]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[59] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[61]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[60] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[56] (type: L)
	}
	Object[62]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[63]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[62] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[64]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[63] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[56] (type: L)
	}
}

.1.2.1.1.4 trace is safe.
.1.2.1.2[0] 
Leaf state, raised exception: Object[31]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[30] (fresh) &&
	{V9} >= 0 &&
	0 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[30] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[31]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[32] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[32]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[39], Object[46], Object[49]}
	}
	Object[33]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[37]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[39]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[38] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[34] (type: L)
	}
	Object[40]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[41] (type: L)
	}
	Object[47]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[48]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[47] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[49]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[48] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[41] (type: L)
	}
}

.1.2.1.2 trace is safe.
.1.2.2[6] 
Leaf state, raised exception: Object[30]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[18] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[27] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[21] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[24] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[17]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[16] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[18]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[20] (type: L)
	}
	Object[19]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[20]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[19] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[21]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[23] (type: L)
	}
	Object[22]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[23]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[22] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[24]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[26] (type: L)
	}
	Object[25]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[26]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[25] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[27]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[18], Object[21], Object[24]}
	}
	Object[28]: {
		Type: [C
		Length: 1
		Items: {"k"}
	}
	Object[29]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 107 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[28] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 1 (type: I)
	}
	Object[30]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[31] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[31]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[38], Object[45], Object[48]}
	}
	Object[32]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[36]: {
		Type: [C
		Length: 26
		Items: {"extract_fencepostZeroWidth"}
	}
	Object[37]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1444283605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[36] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[38]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[37] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[33] (type: L)
	}
	Object[39]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[43]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[44]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[43] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[45]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[44] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[40] (type: L)
	}
	Object[46]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[48]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[47] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[40] (type: L)
	}
}

.1.2.2 trace is safe.
Symbolic execution finished at Wed May 16 15:02:52 CEST 2018.
Analyzed states: 3276, Analyzed traces: 18, Safe: 18, Unsafe: 0, Out of scope: 0, Violating assumptions: 0, Unmanageable: 0.
Elapsed time: 490 msec, Average speed: 6685 states/sec, Elapsed time in decision procedure: 116 msec (23.67% of total).
[39507] WARN SMTSolver - Error while parsing uareup
[39507] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39509] WARN SMTSolver - Error while parsing uareup
[39509] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39511] WARN SMTSolver - Error while parsing uareup
[39511] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39557] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[39557] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39568] WARN SMTSolver - Error while parsing uareup
[39568] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39569] WARN SMTSolver - Error while parsing uareup
[39569] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39570] WARN SMTSolver - Error while parsing uareup
[39570] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39573] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[39573] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39602] WARN SMTSolver - Error while parsing uareup
[39602] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39604] WARN SMTSolver - Error while parsing uareup
[39605] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39606] WARN SMTSolver - Error while parsing uareup
[39606] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39608] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[39609] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39621] WARN SMTSolver - Error while parsing uareup
[39621] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39622] WARN SMTSolver - Error while parsing uareup
[39622] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39623] WARN SMTSolver - Error while parsing uareup
[39623] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39625] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[39625] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39635] WARN SMTSolver - Error while parsing uareup
[39635] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39636] WARN SMTSolver - Error while parsing uareup
[39636] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39639] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39662] WARN SMTSolver - Error while parsing uareup
[39662] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39663] WARN SMTSolver - Error while parsing uareup
[39663] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39664] WARN SMTSolver - Error while parsing uareup
[39664] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39666] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39666] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39674] WARN SMTSolver - Error while parsing uareup
[39674] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39675] WARN SMTSolver - Error while parsing uareup
[39675] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39675] WARN SMTSolver - Error while parsing uareup
[39676] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39682] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39682] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39695] WARN SMTSolver - Error while parsing uareup
[39695] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39699] WARN SMTSolver - Error while parsing uareup
[39699] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39700] WARN SMTSolver - Error while parsing uareup
[39700] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39709] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39709] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39723] WARN SMTSolver - Error while parsing uareup
[39723] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39724] WARN SMTSolver - Error while parsing uareup
[39724] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39724] WARN SMTSolver - Error while parsing uareup
[39724] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39726] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39727] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39734] WARN SMTSolver - Error while parsing uareup
[39734] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39735] WARN SMTSolver - Error while parsing uareup
[39735] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39737] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39752] WARN SMTSolver - Error while parsing uareup
[39752] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39753] WARN SMTSolver - Error while parsing uareup
[39753] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39754] WARN SMTSolver - Error while parsing uareup
[39754] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39756] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39756] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39766] WARN SMTSolver - Error while parsing uareup
[39766] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39767] WARN SMTSolver - Error while parsing uareup
[39767] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39768] WARN SMTSolver - Error while parsing uareup
[39768] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39771] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39771] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39780] WARN SMTSolver - Error while parsing uareup
[39780] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39781] WARN SMTSolver - Error while parsing uareup
[39781] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39782] WARN SMTSolver - Error while parsing uareup
[39782] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39785] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39785] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39802] WARN SMTSolver - Error while parsing uareup
[39802] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39803] WARN SMTSolver - Error while parsing uareup
[39803] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39804] WARN SMTSolver - Error while parsing uareup
[39804] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39807] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[39808] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39814] WARN SMTSolver - Error while parsing uareup
[39814] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39814] WARN SMTSolver - Error while parsing uareup
[39814] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[39816] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[39830] INFO Amplification - 3 new tests generated
[39868] INFO AssertGenerator - Run tests. (3)
[39880] DEBUG Launcher - printing com.squareup.javapoet.LineWrapperTest to /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources
[39952] WARN TestCompiler - 3 errors during compilation, discarding involved test methods
[40044] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[40044] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[40044] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[40133] WARN AssertGenerator - Error when executing tests before Assertion Amplification:
fr.inria.diversify.dspot.AmplificationException: Every test methods are uncompilable
	at fr.inria.diversify.utils.compilation.TestCompiler.compileAndRun(TestCompiler.java:76)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.innerAssertionAmplification(AssertGenerator.java:95)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.assertionAmplification(AssertGenerator.java:66)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:140)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[40133] INFO AssertGenerator - Could not generate any test with assertions
[40133] INFO Amplification - 0 amplified test(s) has been selected, global: 0
[40133] INFO Amplification - amp wrapEmbeddedNewlines_ZeroWidth (3/6)
[40537] INFO Amplification - iteration 0:
[40537] INFO Amplification - 1 tests selected to be amplified over 1 available tests
[40537] INFO Amplification - Amplification of inputs...
100% |================================================== ]/
[40605] DEBUG Launcher - building sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[40607] DEBUG Launcher - build args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -1.8, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[40654] DEBUG Launcher - built in 49 ms
[40655] DEBUG Launcher - building templates: []
[40655] DEBUG Launcher - built in 0 ms
[40655] DEBUG Launcher - model built in 50
[40655] DEBUG Launcher - compiling sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[40656] DEBUG Launcher - compile args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -d, /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/test-classes, -1.8, -proc:none, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[40711] DEBUG Launcher - compiled in 56 ms
This is the Java Bytecode Symbolic Executor's Run Tool (JBSE v.0.8.0-SNAPSHOT).
Connecting to Z3 at lib/z3/build/bin/z3.
Starting symbolic execution of method com/squareup/javapoet/LineWrapperTest:(II)V:extract_wrapEmbeddedNewlines_ZeroWidth at Wed May 16 15:02:54 CEST 2018.
.1.1.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.1 trace is safe.
.1.1.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.2 trace is safe.
.1.1.1.1.3[635] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 3 &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[36] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[34] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[35] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[1]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijk
lmn "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 14 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Type: [C
		Length: 11
		Items: {"opqrstuvwxy"}
	}
	Object[30]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1278414924 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[29] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 34
		Items: {"abcdefghijk
lmnopqrstuvwxy        "}
	}
	Object[32]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[34]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[35]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[36]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[37]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
}

.1.1.1.1.3 trace is safe.
.1.1.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: WRAP           "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 23
		Items: {"Unknown FlushType: WRAP"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.1.1.1.4 trace is safe.
.1.1.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.2 trace is safe.
.1.1.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.1.2 trace is safe.
.1.2.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.1 trace is safe.
.1.2.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.2 trace is safe.
.1.2.1.1.3[635] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 3 &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[36] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[34] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[35] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[1]: Name: count, Type: I, Value: 26 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijk
lmn "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 14 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Type: [C
		Length: 11
		Items: {"opqrstuvwxy"}
	}
	Object[30]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1278414924 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[29] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 34
		Items: {"abcdefghijk
lmnopqrstuvwxy        "}
	}
	Object[32]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[34]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[35]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[36]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[37]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
}

.1.2.1.1.3 trace is safe.
.1.2.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: EMPTY          "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 24
		Items: {"Unknown FlushType: EMPTY"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.2.1.1.4 trace is safe.
.1.2.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.2 trace is safe.
.1.2.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghijk
lmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1652557946 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 38
		Items: {"extract_wrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1134989168 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 38 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.2.2 trace is safe.
Symbolic execution finished at Wed May 16 15:02:55 CEST 2018.
Analyzed states: 2597, Analyzed traces: 12, Safe: 12, Unsafe: 0, Out of scope: 0, Violating assumptions: 0, Unmanageable: 0.
Elapsed time: 255 msec, Average speed: 10184 states/sec, Elapsed time in decision procedure: 79 msec (30.98% of total).
[41002] WARN SMTSolver - Error while parsing uareup
[41003] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41009] WARN SMTSolver - Error while parsing uareup
[41010] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41014] WARN SMTSolver - Error while parsing uareup
[41014] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41018] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[41018] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41029] WARN SMTSolver - Error while parsing uareup
[41029] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41030] WARN SMTSolver - Error while parsing uareup
[41038] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41039] WARN SMTSolver - Error while parsing uareup
[41039] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41042] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[41042] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41046] WARN SMTSolver - Error while parsing uareup
[41046] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41047] WARN SMTSolver - Error while parsing uareup
[41047] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41048] WARN SMTSolver - Error while parsing uareup
[41048] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41049] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[41049] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41054] WARN SMTSolver - Error while parsing uareup
[41054] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41055] WARN SMTSolver - Error while parsing uareup
[41055] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41056] WARN SMTSolver - Error while parsing uareup
[41056] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41058] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[41058] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41062] WARN SMTSolver - Error while parsing uareup
[41062] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41064] WARN SMTSolver - Error while parsing uareup
[41064] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41065] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41085] WARN SMTSolver - Error while parsing uareup
[41085] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41087] WARN SMTSolver - Error while parsing uareup
[41087] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41089] WARN SMTSolver - Error while parsing uareup
[41089] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41094] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[41094] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41102] WARN SMTSolver - Error while parsing uareup
[41102] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41107] WARN SMTSolver - Error while parsing uareup
[41107] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41112] WARN SMTSolver - Error while parsing uareup
[41112] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41114] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[41114] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41119] WARN SMTSolver - Error while parsing uareup
[41119] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41120] WARN SMTSolver - Error while parsing uareup
[41120] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41121] WARN SMTSolver - Error while parsing uareup
[41121] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41122] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[41122] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41130] WARN SMTSolver - Error while parsing uareup
[41130] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41131] WARN SMTSolver - Error while parsing uareup
[41131] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41132] WARN SMTSolver - Error while parsing uareup
[41132] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41133] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[41134] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41150] WARN SMTSolver - Error while parsing uareup
[41150] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41151] WARN SMTSolver - Error while parsing uareup
[41151] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41154] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[41166] INFO Amplification - 2 new tests generated
[41176] INFO AssertGenerator - Run tests. (2)
[41180] DEBUG Launcher - printing com.squareup.javapoet.LineWrapperTest to /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources
[41234] WARN TestCompiler - 2 errors during compilation, discarding involved test methods
[41323] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[41323] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[41386] WARN AssertGenerator - Error when executing tests before Assertion Amplification:
fr.inria.diversify.dspot.AmplificationException: Every test methods are uncompilable
	at fr.inria.diversify.utils.compilation.TestCompiler.compileAndRun(TestCompiler.java:76)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.innerAssertionAmplification(AssertGenerator.java:95)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.assertionAmplification(AssertGenerator.java:66)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:140)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[41387] INFO AssertGenerator - Could not generate any test with assertions
[41387] INFO Amplification - 0 amplified test(s) has been selected, global: 0
[41387] INFO Amplification - amp nospaceWrapMax (4/6)
[41782] INFO Amplification - iteration 0:
[41782] INFO Amplification - 1 tests selected to be amplified over 1 available tests
[41782] INFO Amplification - Amplification of inputs...
100% |================================================== ]/
[41806] DEBUG Launcher - building sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[41807] DEBUG Launcher - build args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -1.8, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[41854] DEBUG Launcher - built in 48 ms
[41854] DEBUG Launcher - building templates: []
[41854] DEBUG Launcher - built in 0 ms
[41854] DEBUG Launcher - model built in 48
[41854] DEBUG Launcher - compiling sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[41855] DEBUG Launcher - compile args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -d, /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/test-classes, -1.8, -proc:none, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[41922] DEBUG Launcher - compiled in 68 ms
This is the Java Bytecode Symbolic Executor's Run Tool (JBSE v.0.8.0-SNAPSHOT).
Connecting to Z3 at lib/z3/build/bin/z3.
Starting symbolic execution of method com/squareup/javapoet/LineWrapperTest:(II)V:extract_nospaceWrapMax at Wed May 16 15:02:56 CEST 2018.
.1.1.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghijk          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.1 trace is safe.
.1.1.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghijk          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.2 trace is safe.
.1.1.1.1.3[352] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 3
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijk     "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghijk          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
}

.1.1.1.1.3 trace is safe.
.1.1.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghijk          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: EMPTY          "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 24
		Items: {"Unknown FlushType: EMPTY"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.1.1.1.4 trace is safe.
.1.1.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghijk          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.2 trace is safe.
.1.1.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghijk          "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.1.2 trace is safe.
.1.2.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.1 trace is safe.
.1.2.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.2 trace is safe.
.1.2.1.1.3[311] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 3
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghijk     "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 11 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
}

.1.2.1.1.3 trace is safe.
.1.2.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: WRAP           "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 23
		Items: {"Unknown FlushType: WRAP"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.2.1.1.4 trace is safe.
.1.2.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.2 trace is safe.
.1.2.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	11 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 6
		Items: {"fghijk"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1276468669 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 22
		Items: {"extract_nospaceWrapMax"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1989273747 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 22 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.2.2 trace is safe.
Symbolic execution finished at Wed May 16 15:02:56 CEST 2018.
Analyzed states: 2064, Analyzed traces: 12, Safe: 12, Unsafe: 0, Out of scope: 0, Violating assumptions: 0, Unmanageable: 0.
Elapsed time: 305 msec, Average speed: 6767 states/sec, Elapsed time in decision procedure: 104 msec (34.1% of total).
[42255] WARN SMTSolver - Error while parsing uareup
[42256] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42260] WARN SMTSolver - Error while parsing uareup
[42260] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42262] WARN SMTSolver - Error while parsing uareup
[42270] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42280] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[42280] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42293] WARN SMTSolver - Error while parsing uareup
[42293] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42294] WARN SMTSolver - Error while parsing uareup
[42294] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42296] WARN SMTSolver - Error while parsing uareup
[42296] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42297] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[42297] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42302] WARN SMTSolver - Error while parsing uareup
[42302] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42303] WARN SMTSolver - Error while parsing uareup
[42303] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42304] WARN SMTSolver - Error while parsing uareup
[42304] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42305] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[42305] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42312] WARN SMTSolver - Error while parsing uareup
[42312] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42312] WARN SMTSolver - Error while parsing uareup
[42312] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42313] WARN SMTSolver - Error while parsing uareup
[42313] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42314] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[42314] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42322] WARN SMTSolver - Error while parsing uareup
[42322] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42324] WARN SMTSolver - Error while parsing uareup
[42324] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42329] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42340] WARN SMTSolver - Error while parsing uareup
[42340] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42342] WARN SMTSolver - Error while parsing uareup
[42342] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42343] WARN SMTSolver - Error while parsing uareup
[42343] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42344] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[42344] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42349] WARN SMTSolver - Error while parsing uareup
[42349] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42350] WARN SMTSolver - Error while parsing uareup
[42350] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42351] WARN SMTSolver - Error while parsing uareup
[42351] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42352] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[42352] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42357] WARN SMTSolver - Error while parsing uareup
[42357] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42362] WARN SMTSolver - Error while parsing uareup
[42363] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42369] WARN SMTSolver - Error while parsing uareup
[42369] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42373] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[42373] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42384] WARN SMTSolver - Error while parsing uareup
[42384] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42388] WARN SMTSolver - Error while parsing uareup
[42388] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42391] WARN SMTSolver - Error while parsing uareup
[42391] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42396] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[42396] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42402] WARN SMTSolver - Error while parsing uareup
[42402] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42403] WARN SMTSolver - Error while parsing uareup
[42403] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42404] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[42415] INFO Amplification - 2 new tests generated
[42426] INFO AssertGenerator - Run tests. (2)
[42431] DEBUG Launcher - printing com.squareup.javapoet.LineWrapperTest to /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources
[42492] WARN TestCompiler - 2 errors during compilation, discarding involved test methods
[42591] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[42591] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[42653] WARN AssertGenerator - Error when executing tests before Assertion Amplification:
fr.inria.diversify.dspot.AmplificationException: Every test methods are uncompilable
	at fr.inria.diversify.utils.compilation.TestCompiler.compileAndRun(TestCompiler.java:76)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.innerAssertionAmplification(AssertGenerator.java:95)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.assertionAmplification(AssertGenerator.java:66)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:140)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[42655] INFO AssertGenerator - Could not generate any test with assertions
[42655] INFO Amplification - 0 amplified test(s) has been selected, global: 0
[42655] INFO Amplification - amp zeroWidthNoWrap (5/6)
[42996] INFO Amplification - iteration 0:
[42996] INFO Amplification - 1 tests selected to be amplified over 1 available tests
[42996] INFO Amplification - Amplification of inputs...
100% |================================================== ]/
[43014] DEBUG Launcher - building sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[43014] DEBUG Launcher - build args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -1.8, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[43049] DEBUG Launcher - built in 35 ms
[43049] DEBUG Launcher - building templates: []
[43049] DEBUG Launcher - built in 0 ms
[43050] DEBUG Launcher - model built in 36
[43050] DEBUG Launcher - compiling sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[43050] DEBUG Launcher - compile args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -d, /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/test-classes, -1.8, -proc:none, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[43100] DEBUG Launcher - compiled in 50 ms
This is the Java Bytecode Symbolic Executor's Run Tool (JBSE v.0.8.0-SNAPSHOT).
Connecting to Z3 at lib/z3/build/bin/z3.
Starting symbolic execution of method com/squareup/javapoet/LineWrapperTest:(II)V:extract_zeroWidthNoWrap at Wed May 16 15:02:57 CEST 2018.
.1.1.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghij           "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.1 trace is safe.
.1.1.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghij           "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.2 trace is safe.
.1.1.1.1.3[319] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 3
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghij           "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
}

.1.1.1.1.3 trace is safe.
.1.1.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghij           "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: EMPTY          "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 24
		Items: {"Unknown FlushType: EMPTY"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.1.1.1.4 trace is safe.
.1.1.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghij           "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.2 trace is safe.
.1.1.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"fghij           "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 199 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 5
		Items: {"close"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 94756344 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 104 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.1.2 trace is safe.
.1.2.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.1 trace is safe.
.1.2.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.2 trace is safe.
.1.2.1.1.3[301] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 3
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij      "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 10 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
}

.1.2.1.1.3 trace is safe.
.1.2.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: WRAP           "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 23
		Items: {"Unknown FlushType: WRAP"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.2.1.1.4 trace is safe.
.1.2.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.2 trace is safe.
.1.2.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 5
		Items: {"fghij"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97370920 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 23
		Items: {"extract_zeroWidthNoWrap"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1331087477 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 198 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.2.2 trace is safe.
Symbolic execution finished at Wed May 16 15:02:57 CEST 2018.
Analyzed states: 2011, Analyzed traces: 12, Safe: 12, Unsafe: 0, Out of scope: 0, Violating assumptions: 0, Unmanageable: 0.
Elapsed time: 258 msec, Average speed: 7794 states/sec, Elapsed time in decision procedure: 138 msec (53.49% of total).
[43388] WARN SMTSolver - Error while parsing uareup
[43388] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43389] WARN SMTSolver - Error while parsing uareup
[43389] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43390] WARN SMTSolver - Error while parsing uareup
[43390] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43391] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[43391] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43397] WARN SMTSolver - Error while parsing uareup
[43397] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43398] WARN SMTSolver - Error while parsing uareup
[43398] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43399] WARN SMTSolver - Error while parsing uareup
[43399] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43401] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[43401] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43417] WARN SMTSolver - Error while parsing uareup
[43417] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43423] WARN SMTSolver - Error while parsing uareup
[43424] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43430] WARN SMTSolver - Error while parsing uareup
[43430] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43445] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[43445] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43455] WARN SMTSolver - Error while parsing uareup
[43455] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43455] WARN SMTSolver - Error while parsing uareup
[43455] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43457] WARN SMTSolver - Error while parsing uareup
[43457] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43460] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[43460] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43465] WARN SMTSolver - Error while parsing uareup
[43465] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43466] WARN SMTSolver - Error while parsing uareup
[43466] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43476] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43485] WARN SMTSolver - Error while parsing uareup
[43485] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43486] WARN SMTSolver - Error while parsing uareup
[43486] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43486] WARN SMTSolver - Error while parsing uareup
[43486] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43489] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[43489] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43497] WARN SMTSolver - Error while parsing uareup
[43497] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43501] WARN SMTSolver - Error while parsing uareup
[43501] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43504] WARN SMTSolver - Error while parsing uareup
[43504] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43507] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[43507] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43514] WARN SMTSolver - Error while parsing uareup
[43514] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43515] WARN SMTSolver - Error while parsing uareup
[43515] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43517] WARN SMTSolver - Error while parsing uareup
[43517] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43520] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[43520] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43524] WARN SMTSolver - Error while parsing uareup
[43524] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43527] WARN SMTSolver - Error while parsing uareup
[43527] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43531] WARN SMTSolver - Error while parsing uareup
[43531] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43536] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[43537] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43546] WARN SMTSolver - Error while parsing uareup
[43546] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43547] WARN SMTSolver - Error while parsing uareup
[43547] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43550] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[43562] INFO Amplification - 2 new tests generated
[43574] INFO AssertGenerator - Run tests. (2)
[43577] DEBUG Launcher - printing com.squareup.javapoet.LineWrapperTest to /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources
[43627] WARN TestCompiler - 2 errors during compilation, discarding involved test methods
[43690] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[43691] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[43757] WARN AssertGenerator - Error when executing tests before Assertion Amplification:
fr.inria.diversify.dspot.AmplificationException: Every test methods are uncompilable
	at fr.inria.diversify.utils.compilation.TestCompiler.compileAndRun(TestCompiler.java:76)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.innerAssertionAmplification(AssertGenerator.java:95)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.assertionAmplification(AssertGenerator.java:66)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:140)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[43758] INFO AssertGenerator - Could not generate any test with assertions
[43758] INFO Amplification - 0 amplified test(s) has been selected, global: 0
[43758] INFO Amplification - amp noWrapEmbeddedNewlines_ZeroWidth (6/6)
[44101] INFO Amplification - iteration 0:
[44101] INFO Amplification - 1 tests selected to be amplified over 1 available tests
[44101] INFO Amplification - Amplification of inputs...
100% |================================================== ]/
[44120] DEBUG Launcher - building sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[44120] DEBUG Launcher - build args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -1.8, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[44163] DEBUG Launcher - built in 43 ms
[44163] DEBUG Launcher - building templates: []
[44163] DEBUG Launcher - built in 0 ms
[44163] DEBUG Launcher - model built in 43
[44163] DEBUG Launcher - compiling sources: [/home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[44164] DEBUG Launcher - compile args: [-encoding, UTF-8, -cp, /home/bdanglot/.m2/repository/com/google/truth/truth/0.39/truth-0.39.jar:/home/bdanglot/.m2/repository/com/google/guava/guava/23.4-android/guava-23.4-android.jar:/home/bdanglot/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/bdanglot/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/bdanglot/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/bdanglot/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/bdanglot/.m2/repository/com/google/testing/compile/compile-testing/0.15/compile-testing-0.15.jar:/home/bdanglot/.m2/repository/com/google/truth/extensions/truth-java8-extension/0.37/truth-java8-extension-0.37.jar:/home/bdanglot/.m2/repository/com/google/auto/value/auto-value/1.5.3/auto-value-1.5.3.jar:/home/bdanglot/.m2/repository/com/google/auto/auto-common/0.9/auto-common-0.9.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/../lib/tools.jar:/home/bdanglot/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/bdanglot/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/bdanglot/.m2/repository/com/google/jimfs/jimfs/1.1/jimfs-1.1.jar:/home/bdanglot/.m2/repository/org/mockito/mockito-core/2.13.0/mockito-core-2.13.0.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy/1.7.9/byte-buddy-1.7.9.jar:/home/bdanglot/.m2/repository/net/bytebuddy/byte-buddy-agent/1.7.9/byte-buddy-agent-1.7.9.jar:/home/bdanglot/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/bdanglot/.m2/repository/org/eclipse/jdt/core/compiler/ecj/4.6.1/ecj-4.6.1.jar:dataset/may-2018/javapoet/608_modified//target/classes:target/dspot/dependencies/:dataset/may-2018/javapoet/608_modified//target/test-classes:, -d, /home/bdanglot/workspace/Ex2amplifier-experiments/dataset/may-2018/javapoet/608_modified/target/test-classes, -1.8, -proc:none, -preserveAllLocals, -noExit, -enableJavadoc, /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources/com/squareup/javapoet/LineWrapperTest.java]
[44207] DEBUG Launcher - compiled in 44 ms
This is the Java Bytecode Symbolic Executor's Run Tool (JBSE v.0.8.0-SNAPSHOT).
Connecting to Z3 at lib/z3/build/bin/z3.
Starting symbolic execution of method com/squareup/javapoet/LineWrapperTest:(II)V:extract_noWrapEmbeddedNewlines_ZeroWidth at Wed May 16 15:02:58 CEST 2018.
.1.1.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.1 trace is safe.
.1.1.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.1.2 trace is safe.
.1.1.1.1.3[655] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} == 3 &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[36] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[34] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[35] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[1]: Name: count, Type: I, Value: 27 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij
klmn "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Type: [C
		Length: 12
		Items: {"opqrstuvwxyz"}
	}
	Object[30]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -976156858 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[29] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 12 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 34
		Items: {"abcdefghij
klmnopqrstuvwxyz       "}
	}
	Object[32]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[34]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[35]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[36]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[37]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
}

.1.1.1.1.3 trace is safe.
.1.1.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 0 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: WRAP           "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 23 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 23
		Items: {"Unknown FlushType: WRAP"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.1.1.1.4 trace is safe.
.1.1.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	0 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.1.1.2 trace is safe.
.1.1.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 > {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.1.2 trace is safe.
.1.2.1.1.1[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 1
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 112 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.1 trace is safe.
.1.2.1.1.2[4] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 2
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/VerifyError
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 120 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.1.2 trace is safe.
.1.2.1.1.3[655] 
Leaf state
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} == 3 &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[36] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[34] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[35] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[1]: Name: count, Type: I, Value: 27 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcdefghij
klmn "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 16 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: -1 (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: 1 (type: I)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: null (type: 0)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Type: [C
		Length: 12
		Items: {"opqrstuvwxyz"}
	}
	Object[30]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -976156858 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[29] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 12 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 34
		Items: {"abcdefghij
klmnopqrstuvwxyz       "}
	}
	Object[32]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[34]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[35]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[36]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[37]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
}

.1.2.1.1.3 trace is safe.
.1.2.1.1.4[344] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 < {V9} &&
	{V11} < 1 || {V11} > 3 &&
	pre_init(java/lang/IllegalArgumentException) &&
	pre_init(java/lang/RuntimeException) &&
	pre_init(java/lang/Exception) &&
	pre_init(java/lang/Throwable) &&
	!pre_init(java/util/Arrays) &&
	!pre_init(java/lang/Math) &&
	!pre_init(java/lang/Float) &&
	!pre_init(java/lang/Double)
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length &&
	{V11} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
Static store: {
	Class[java/lang/Math]: {
		Field[0]: Name: negativeZeroFloatBits, Type: J, Value: -2147483648 (type: J)
		Field[1]: Name: negativeZeroDoubleBits, Type: J, Value: -9223372036854775808 (type: J)
		Field[2]: Name: E, Type: D, Value: 2.718281828459045 (type: D)
		Field[3]: Name: randomNumberGenerator, Type: Ljava/util/Random;, Value: null (type: 0)
		Field[4]: Name: PI, Type: D, Value: 3.141592653589793 (type: D)
	}
	Class[java/lang/Exception]: {
		Origin: [java/lang/Exception]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3387516993124229948 (type: J)
	}
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/Number]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -8742448824652078965 (type: J)
	}
	Class[java/lang/IllegalArgumentException]: {
		Origin: [java/lang/IllegalArgumentException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -5365630128856068164 (type: J)
	}
	Class[java/lang/Float]: {
		Field[0]: Name: MAX_EXPONENT, Type: I, Value: 127 (type: I)
		Field[1]: Name: SIZE, Type: I, Value: 32 (type: I)
		Field[2]: Name: MIN_VALUE, Type: F, Value: 1.4E-45 (type: F)
		Field[3]: Name: NEGATIVE_INFINITY, Type: F, Value: -Infinity (type: F)
		Field[4]: Name: serialVersionUID, Type: J, Value: -2671257302660747028 (type: J)
		Field[5]: Name: MIN_NORMAL, Type: F, Value: 1.17549435E-38 (type: F)
		Field[6]: Name: MIN_EXPONENT, Type: I, Value: -126 (type: I)
		Field[7]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[39] (type: L)
		Field[8]: Name: POSITIVE_INFINITY, Type: F, Value: Infinity (type: F)
		Field[9]: Name: NaN, Type: F, Value: NaN (type: F)
		Field[10]: Name: MAX_VALUE, Type: F, Value: 3.4028235E38 (type: F)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/util/Arrays]: {
		Field[0]: Name: INSERTIONSORT_THRESHOLD, Type: I, Value: 7 (type: I)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/RuntimeException]: {
		Origin: [java/lang/RuntimeException]
		Field[0]: Name: serialVersionUID, Type: J, Value: -7034897190745766939 (type: J)
	}
	Class[java/lang/Class]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 3206093459760846163 (type: J)
		Field[1]: Name: initted, Type: Z, Value: 0 (type: I)
		Field[2]: Name: allPermDomain, Type: Ljava/security/ProtectionDomain;, Value: null (type: 0)
		Field[3]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[37] (type: L)
		Field[4]: Name: useCaches, Type: Z, Value: 1 (type: I)
		Field[5]: Name: ANNOTATION, Type: I, Value: 8192 (type: I)
		Field[6]: Name: SYNTHETIC, Type: I, Value: 4096 (type: I)
		Field[7]: Name: reflectionFactory, Type: Lsun/reflect/ReflectionFactory;, Value: null (type: 0)
		Field[8]: Name: EMPTY_ANNOTATIONS_ARRAY, Type: [Ljava/lang/annotation/Annotation;, Value: Object[38] (type: L)
		Field[9]: Name: ENUM, Type: I, Value: 16384 (type: I)
	}
	Class[java/lang/Throwable]: {
		Origin: [java/lang/Throwable]
		Field[0]: Name: serialVersionUID, Type: J, Value: -3042686055658047285 (type: J)
	}
	Class[java/lang/Double]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: -9172774392245257468 (type: J)
		Field[1]: Name: MIN_EXPONENT, Type: I, Value: -1022 (type: I)
		Field[2]: Name: SIZE, Type: I, Value: 64 (type: I)
		Field[3]: Name: TYPE, Type: Ljava/lang/Class;, Value: Object[42] (type: L)
		Field[4]: Name: MIN_VALUE, Type: D, Value: 4.9E-324 (type: D)
		Field[5]: Name: NaN, Type: D, Value: NaN (type: D)
		Field[6]: Name: MIN_NORMAL, Type: D, Value: 2.2250738585072014E-308 (type: D)
		Field[7]: Name: POSITIVE_INFINITY, Type: D, Value: Infinity (type: D)
		Field[8]: Name: MAX_VALUE, Type: D, Value: 1.7976931348623157E308 (type: D)
		Field[9]: Name: MAX_EXPONENT, Type: I, Value: 1023 (type: I)
		Field[10]: Name: NEGATIVE_INFINITY, Type: D, Value: -Infinity (type: D)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			{INDEX} >= 0 && {INDEX} < {V9} && {INDEX} == 2 -> {V11}
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/IllegalArgumentException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: Object[29] (type: L)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[45] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[1]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[31]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[32]: {
		Type: [C
		Length: 19
		Items: {"Unknown FlushType: "}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 291187950 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 19 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 34
		Items: {"Unknown FlushType: EMPTY          "}
	}
	Object[35]: {
		Type: [C
		Length: 5
		Items: {"float"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97526364 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[37]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[38]: {
		Type: [Ljava/lang/annotation/Annotation;
		Length: 0
		Items: {}
	}
	Object[39]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[40]: {
		Type: [C
		Length: 6
		Items: {"double"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1325958191 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[42]: {
		Class: java/lang/Class
		Field[0]: Name: enumConstants, Type: [Ljava/lang/Object;, Value: null (type: 0)
		Field[1]: Name: genericInfo, Type: Lsun/reflect/generics/repository/ClassRepository;, Value: null (type: 0)
		Field[2]: Name: cachedConstructor, Type: Ljava/lang/reflect/Constructor;, Value: null (type: 0)
		Field[3]: Name: annotationType, Type: Lsun/reflect/annotation/AnnotationType;, Value: null (type: 0)
		Field[4]: Name: annotations, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[5]: Name: publicConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[6]: Name: declaredPublicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[7]: Name: publicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[8]: Name: classRedefinedCount, Type: I, Value: 0 (type: I)
		Field[9]: Name: newInstanceCallerCache, Type: Ljava/lang/Class;, Value: null (type: 0)
		Field[10]: Name: declaredPublicMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[11]: Name: declaredFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[12]: Name: declaredMethods, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[13]: Name: lastRedefinedCount, Type: I, Value: 0 (type: I)
		Field[14]: Name: declaredConstructors, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[15]: Name: publicFields, Type: Ljava/lang/ref/SoftReference;, Value: null (type: 0)
		Field[16]: Name: enumConstantDirectory, Type: Ljava/util/Map;, Value: null (type: 0)
		Field[17]: Name: name, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[18]: Name: declaredAnnotations, Type: Ljava/util/Map;, Value: null (type: 0)
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 0 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 24 (type: I)
	}
	Object[44]: {
		Type: [C
		Length: 24
		Items: {"Unknown FlushType: EMPTY"}
	}
	Object[45]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[52], Object[59], Object[62]}
	}
	Object[46]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[47]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[46] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[48]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[49]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[48] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[50]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[51]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[50] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[52]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[49] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[51] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[47] (type: L)
	}
	Object[53]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[54]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[53] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[55]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[56]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[55] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[57]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[58]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[57] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[59]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[58] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
	Object[60]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[61]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[60] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[62]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[56] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[61] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 125 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[54] (type: L)
	}
}

.1.2.1.1.4 trace is safe.
.1.2.1.2[0] 
Leaf state, raised exception: Object[29]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == Object[28] (fresh) &&
	{V9} >= 0 &&
	2 >= {V9}
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType &&
	{V9} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == Object[28] (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Origin: [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
		Type: [I
		Length: {V9}
		Items: {
			(no assumption on other values)
		}
	}
	Object[29]: {
		Class: java/lang/ArrayIndexOutOfBoundsException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[30] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[30]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[37], Object[44], Object[47]}
	}
	Object[31]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[32]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[31] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[33]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[34]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[33] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[35]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[36]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[35] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[37]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[34] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[36] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[32] (type: L)
	}
	Object[38]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[39]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[38] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[40]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[41]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[40] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[42]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[43]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[42] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[44]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[43] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
	Object[45]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[46]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[45] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[47]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[41] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[46] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[39] (type: L)
	}
}

.1.2.1.2 trace is safe.
.1.2.2[6] 
Leaf state, raised exception: Object[28]
Path condition: 
	{R0} == Object[0] (fresh) &&
	pre_init(com/squareup/javapoet/LineWrapperTest) &&
	pre_init(java/lang/StringBuffer) &&
	!pre_init(java/lang/AbstractStringBuilder) &&
	pre_init(com/squareup/javapoet/LineWrapper) &&
	!pre_init(java/lang/StringBuilder) &&
	pre_init(com/squareup/javapoet/Util) &&
	!pre_init(java/lang/System) &&
	10 <= {V1} &&
	pre_init(com/squareup/javapoet/LineWrapper$1) &&
	{R3} == null
	where:
	{R0} == {ROOT}:this &&
	{V1} == {ROOT}:__PARAM[1] &&
	{R3} == [com/squareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType
Static store: {
	Class[java/lang/StringBuilder]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 4383685877147921099 (type: J)
	}
	Class[java/lang/StringBuffer]: {
		Origin: [java/lang/StringBuffer]
		Field[0]: Name: serialVersionUID, Type: J, Value: 3388685877147921107 (type: J)
		Field[1]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: {R1} (type: L)
	}
	Class[java/lang/String$CaseInsensitiveComparator]: {
		Field[0]: Name: serialVersionUID, Type: J, Value: 8575799808933029326 (type: J)
	}
	Class[java/lang/String]: {
		Field[0]: Name: CASE_INSENSITIVE_ORDER, Type: Ljava/util/Comparator;, Value: Object[8] (type: L)
		Field[1]: Name: serialVersionUID, Type: J, Value: -6849794470754667710 (type: J)
		Field[2]: Name: serialPersistentFields, Type: [Ljava/io/ObjectStreamField;, Value: Object[7] (type: L)
	}
	Class[java/lang/AbstractStringBuilder]: {
		Field[0]: Name: sizeTable, Type: [I, Value: Object[1] (type: L)
	}
	Class[com/squareup/javapoet/Util]: {
		Origin: [com/squareup/javapoet/Util]
		Field[0]: Name: DEFAULT, Type: Ljavax/lang/model/element/Modifier;, Value: {R2} (type: L)
	}
	Class[com/squareup/javapoet/LineWrapper$FlushType]: {
		Field[0]: Name: WRAP, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[16] (type: L)
		Field[1]: Name: $VALUES, Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[25] (type: L)
		Field[2]: Name: SPACE, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[19] (type: L)
		Field[3]: Name: EMPTY, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Class[java/lang/System]: {
		Field[0]: Name: err, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[1]: Name: cons, Type: Ljava/io/Console;, Value: null (type: 0)
		Field[2]: Name: props, Type: Ljava/util/Properties;, Value: null (type: 0)
		Field[3]: Name: out, Type: Ljava/io/PrintStream;, Value: null (type: 0)
		Field[4]: Name: in, Type: Ljava/io/InputStream;, Value: null (type: 0)
		Field[5]: Name: security, Type: Ljava/lang/SecurityManager;, Value: null (type: 0)
	}
	Class[com/squareup/javapoet/LineWrapper$1]: {
		Origin: [com/squareup/javapoet/LineWrapper$1]
		Field[0]: Name: $SwitchMap$com$squareup$javapoet$LineWrapper$FlushType, Type: [I, Value: {R3} == null (type: L)
	}
}
Heap: {
	Object[0]: {
		Origin: {ROOT}:this
		Class: com/squareup/javapoet/LineWrapperTest
	}
	Object[1]: {
		Type: [I
		Length: 10
		Items: {9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647}
	}
	Object[2]: {
		Class: java/lang/StringBuffer
		Field[0]: Name: value, Type: [C, Value: Object[3] (type: L)
		Field[1]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[3]: {
		Type: [C
		Length: 16
		Items: {"abcde           "}
	}
	Object[4]: {
		Class: com/squareup/javapoet/LineWrapper
		Field[0]: Name: out, Type: Ljava/lang/Appendable;, Value: Object[2] (type: L)
		Field[1]: Name: columnLimit, Type: I, Value: {V1} (type: I)
		Field[2]: Name: column, Type: I, Value: 5 (type: I)
		Field[3]: Name: buffer, Type: Ljava/lang/StringBuilder;, Value: Object[9] (type: L)
		Field[4]: Name: indentLevel, Type: I, Value: {V2} (type: I)
		Field[5]: Name: indent, Type: Ljava/lang/String;, Value: Object[6] (type: L)
		Field[6]: Name: closed, Type: Z, Value: false (type: Z)
		Field[7]: Name: nextFlush, Type: Lcom/squareup/javapoet/LineWrapper$FlushType;, Value: Object[22] (type: L)
	}
	Object[5]: {
		Type: [C
		Length: 2
		Items: {"  "}
	}
	Object[6]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1024 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[5] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 2 (type: I)
	}
	Object[7]: {
		Type: [Ljava/io/ObjectStreamField;
		Length: 0
		Items: {}
	}
	Object[8]: {
		Class: java/lang/String$CaseInsensitiveComparator
	}
	Object[9]: {
		Class: java/lang/StringBuilder
		Field[0]: Name: value, Type: [C, Value: Object[10] (type: L)
		Field[1]: Name: count, Type: I, Value: 0 (type: I)
	}
	Object[10]: {
		Type: [C
		Length: 16
		Items: {"                "}
	}
	Object[11]: {
		Type: [C
		Length: 11
		Items: {"out == null"}
	}
	Object[12]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1691127605 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[11] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 11 (type: I)
	}
	Object[13]: {
		Type: [Ljava/lang/Object;
		Length: 0
		Items: {}
	}
	Object[14]: {
		Type: [C
		Length: 5
		Items: {"abcde"}
	}
	Object[15]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 92599395 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[14] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[16]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 0 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[18] (type: L)
	}
	Object[17]: {
		Type: [C
		Length: 4
		Items: {"WRAP"}
	}
	Object[18]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2672714 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[17] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 4 (type: I)
	}
	Object[19]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 1 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[21] (type: L)
	}
	Object[20]: {
		Type: [C
		Length: 5
		Items: {"SPACE"}
	}
	Object[21]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 79100134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[20] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[22]: {
		Class: com/squareup/javapoet/LineWrapper$FlushType
		Field[0]: Name: ordinal, Type: I, Value: 2 (type: I)
		Field[1]: Name: name, Type: Ljava/lang/String;, Value: Object[24] (type: L)
	}
	Object[23]: {
		Type: [C
		Length: 5
		Items: {"EMPTY"}
	}
	Object[24]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 66096429 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[23] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[25]: {
		Type: [Lcom/squareup/javapoet/LineWrapper$FlushType;
		Length: 3
		Items: {Object[16], Object[19], Object[22]}
	}
	Object[26]: {
		Type: [C
		Length: 10
		Items: {"fghij
klmn"}
	}
	Object[27]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1739249756 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[26] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 10 (type: I)
	}
	Object[28]: {
		Class: java/lang/NullPointerException
		Field[0]: Name: detailMessage, Type: Ljava/lang/String;, Value: null (type: 0)
		Field[1]: Name: cause, Type: Ljava/lang/Throwable;, Value: null (type: 0)
		Field[2]: Name: backtrace, Type: Ljava/lang/Object;, Value: Object[29] (type: L)
		Field[3]: Name: stackTrace, Type: [Ljava/lang/StackTraceElement;, Value: null (type: 0)
	}
	Object[29]: {
		Type: [Ljava/lang/StackTraceElement;
		Length: 3
		Items: {Object[36], Object[43], Object[46]}
	}
	Object[30]: {
		Type: [C
		Length: 37
		Items: {"com.squareup.javapoet.LineWrapperTest"}
	}
	Object[31]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 2055381180 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[30] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 37 (type: I)
	}
	Object[32]: {
		Type: [C
		Length: 20
		Items: {"LineWrapperTest.java"}
	}
	Object[33]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 374373087 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[32] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 20 (type: I)
	}
	Object[34]: {
		Type: [C
		Length: 40
		Items: {"extract_noWrapEmbeddedNewlines_ZeroWidth"}
	}
	Object[35]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -2081203407 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[34] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 40 (type: I)
	}
	Object[36]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[33] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[35] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 197 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[31] (type: L)
	}
	Object[37]: {
		Type: [C
		Length: 33
		Items: {"com.squareup.javapoet.LineWrapper"}
	}
	Object[38]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -497779446 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[37] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 33 (type: I)
	}
	Object[39]: {
		Type: [C
		Length: 16
		Items: {"LineWrapper.java"}
	}
	Object[40]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 1759591633 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[39] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 16 (type: I)
	}
	Object[41]: {
		Type: [C
		Length: 6
		Items: {"append"}
	}
	Object[42]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: -1411068134 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[41] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 6 (type: I)
	}
	Object[43]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[42] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 72 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
	Object[44]: {
		Type: [C
		Length: 5
		Items: {"flush"}
	}
	Object[45]: {
		Class: java/lang/String
		Field[0]: Name: hash, Type: I, Value: 97532676 (type: I)
		Field[1]: Name: value, Type: [C, Value: Object[44] (type: L)
		Field[2]: Name: offset, Type: I, Value: 0 (type: I)
		Field[3]: Name: count, Type: I, Value: 5 (type: I)
	}
	Object[46]: {
		Class: java/lang/StackTraceElement
		Field[0]: Name: fileName, Type: Ljava/lang/String;, Value: Object[40] (type: L)
		Field[1]: Name: methodName, Type: Ljava/lang/String;, Value: Object[45] (type: L)
		Field[2]: Name: lineNumber, Type: I, Value: 110 (type: I)
		Field[3]: Name: declaringClass, Type: Ljava/lang/String;, Value: Object[38] (type: L)
	}
}

.1.2.2 trace is safe.
Symbolic execution finished at Wed May 16 15:02:58 CEST 2018.
Analyzed states: 2627, Analyzed traces: 12, Safe: 12, Unsafe: 0, Out of scope: 0, Violating assumptions: 0, Unmanageable: 0.
Elapsed time: 201 msec, Average speed: 13069 states/sec, Elapsed time in decision procedure: 62 msec (30.85% of total).
[44421] WARN SMTSolver - Error while parsing uareup
[44421] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44422] WARN SMTSolver - Error while parsing uareup
[44422] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44422] WARN SMTSolver - Error while parsing uareup
[44422] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44424] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[44424] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44428] WARN SMTSolver - Error while parsing uareup
[44428] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44432] WARN SMTSolver - Error while parsing uareup
[44433] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44433] WARN SMTSolver - Error while parsing uareup
[44433] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44435] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[44435] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44439] WARN SMTSolver - Error while parsing uareup
[44439] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44441] WARN SMTSolver - Error while parsing uareup
[44441] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44444] WARN SMTSolver - Error while parsing uareup
[44444] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44449] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[44449] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44457] WARN SMTSolver - Error while parsing uareup
[44457] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44458] WARN SMTSolver - Error while parsing uareup
[44458] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44459] WARN SMTSolver - Error while parsing uareup
[44459] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44463] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[0]
[44463] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44473] WARN SMTSolver - Error while parsing uareup
[44474] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44474] WARN SMTSolver - Error while parsing uareup
[44474] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44475] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44482] WARN SMTSolver - Error while parsing uareup
[44482] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44488] WARN SMTSolver - Error while parsing uareup
[44488] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44494] WARN SMTSolver - Error while parsing uareup
[44494] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44495] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[44495] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44499] WARN SMTSolver - Error while parsing uareup
[44499] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44500] WARN SMTSolver - Error while parsing uareup
[44500] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44500] WARN SMTSolver - Error while parsing uareup
[44500] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44501] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[44502] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44505] WARN SMTSolver - Error while parsing uareup
[44505] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.equal(AbstractNumeralFormulaManager.java:271)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:111)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44506] WARN SMTSolver - Error while parsing uareup
[44506] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44506] WARN SMTSolver - Error while parsing uareup
[44506] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44507] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[44508] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44513] WARN SMTSolver - Error while parsing uareup
[44513] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterOrEquals(AbstractNumeralFormulaManager.java:291)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:120)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44513] WARN SMTSolver - Error while parsing uareup
[44513] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44514] WARN SMTSolver - Error while parsing uareup
[44514] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.lessOrEquals(AbstractNumeralFormulaManager.java:312)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:126)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44516] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.[2]
[44516] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44520] WARN SMTSolver - Error while parsing uareup
[44520] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:281)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44521] WARN SMTSolver - Error while parsing uareup
[44521] WARN SMTSolver - should support it
java.lang.NullPointerException
	at org.sosy_lab.java_smt.basicimpl.FormulaCreator.extractInfo(FormulaCreator.java:180)
	at org.sosy_lab.java_smt.basicimpl.AbstractBaseFormulaManager.extractInfo(AbstractBaseFormulaManager.java:45)
	at org.sosy_lab.java_smt.basicimpl.AbstractNumeralFormulaManager.greaterThan(AbstractNumeralFormulaManager.java:282)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.evaluate(SMTSolver.java:117)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.lambda$buildConstraint$4(SMTSolver.java:99)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:474)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.buildConstraint(SMTSolver.java:102)
	at eu.stamp.project.ex2amplifier.smt.SMTSolver.solve(SMTSolver.java:271)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.generateNewTestMethod(JBSEAmplifier.java:65)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.lambda$internalApply$4(JBSEAmplifier.java:57)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.ex2amplifier.amplifier.JBSEAmplifier.internalApply(JBSEAmplifier.java:59)
	at eu.stamp.project.ex2amplifier.amplifier.Ex2Amplifier.apply(Ex2Amplifier.java:68)
	at fr.inria.diversify.dspot.Amplification.lambda$inputAmplifyTest$7(Amplification.java:245)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:747)
	at java.util.stream.ReduceOps$ReduceTask.doLeaf(ReduceOps.java:721)
	at java.util.stream.AbstractTask.compute(AbstractTask.java:316)
	at java.util.concurrent.CountedCompleter.exec(CountedCompleter.java:731)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinTask.doInvoke(ForkJoinTask.java:401)
	at java.util.concurrent.ForkJoinTask.invoke(ForkJoinTask.java:734)
	at java.util.stream.ReduceOps$ReduceOp.evaluateParallel(ReduceOps.java:714)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:233)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at fr.inria.diversify.dspot.Amplification.inputAmplifyTests(Amplification.java:226)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:139)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44531] WARN JBSEAmplifier - Error when trying to generate a value for uareup/javapoet/LineWrapper$1].$SwitchMap$com$squareup$javapoet$LineWrapper$FlushType.length
[44541] INFO Amplification - 2 new tests generated
[44550] INFO AssertGenerator - Run tests. (2)
[44554] DEBUG Launcher - printing com.squareup.javapoet.LineWrapperTest to /home/bdanglot/workspace/Ex2amplifier-experiments/target/dspot/tmp_test_sources
[44606] WARN TestCompiler - 2 errors during compilation, discarding involved test methods
[44685] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[44685] ERROR TestCompiler - Pb(130) The constructor LineWrapper(StringBuffer, int, int) is undefined
[44732] WARN AssertGenerator - Error when executing tests before Assertion Amplification:
fr.inria.diversify.dspot.AmplificationException: Every test methods are uncompilable
	at fr.inria.diversify.utils.compilation.TestCompiler.compileAndRun(TestCompiler.java:76)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.innerAssertionAmplification(AssertGenerator.java:95)
	at fr.inria.diversify.dspot.assertGenerator.AssertGenerator.assertionAmplification(AssertGenerator.java:66)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:140)
	at fr.inria.diversify.dspot.Amplification.amplification(Amplification.java:103)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:183)
	at fr.inria.diversify.dspot.DSpot.amplifyTest(DSpot.java:170)
	at eu.stamp.project.Main.lambda$null$1(Main.java:143)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at eu.stamp.project.Main.lambda$run$2(Main.java:144)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at eu.stamp.project.Main.run(Main.java:117)
	at eu.stamp.project.Main.main(Main.java:88)
[44734] INFO AssertGenerator - Could not generate any test with assertions
[44734] INFO Amplification - 0 amplified test(s) has been selected, global: 0
[44734] INFO DSpot - elapsedTime 10540
======= REPORT =======
0 amplified test fails on the new versions.

[44819] INFO DSpot - Print AmplLineWrapperTest with 0 amplified test cases in results/may-2018/javapoet/608_modified/JBSE
