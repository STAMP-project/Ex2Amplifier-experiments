package org.jsoup.helper;


import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.jsoup.Connection;
import org.junit.Assert;
import org.junit.Test;

import static org.jsoup.Connection.Method.POST;


public class AmplHttpConnectionTest {
    @Test(timeout = 120000)
    public void connectWithUrl() throws Exception, MalformedURLException {
        Connection con = HttpConnection.connect(new URL("http://example.com"));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).tagName());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).title());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).html());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getDefaultPort())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodeSize())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parent());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).tagName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).hasText());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextElementSibling());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).data());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).outerHtml());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).elementSiblingIndex())));
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).text());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusCode())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parentNode());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodeSize())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).textNodes().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).isRegistered());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toExternalForm());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).text());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).id());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormListed());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).ownText());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousElementSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodeSize())));
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodes().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).html());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).getAllElements().isEmpty());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).title());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).cookies().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).baseUri());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).data());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).classNames().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).elementSiblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).hashCode())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).ownText());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).location());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).title());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).name());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataNodes().isEmpty());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).cssSelector());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getPort())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).name());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).location());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Accept-Encoding"));
        Assert.assertEquals("gzip", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Accept-Encoding"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("User-Agent"));
        Assert.assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("User-Agent"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Content-Type"));
        Assert.assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Content-Type"));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).classNames().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nodeName());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getHost());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).data());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).preserveWhitespace());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parent());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataNodes().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).baseUri());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).cookies().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).getErrors().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).classNames().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nodeName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).isBlock());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).className());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).val());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).isBlock());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreHttpErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).classNames().isEmpty());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).toExternalForm());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).className());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getRef());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isEmpty());
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).text());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("GET", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).name());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).val());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nodeName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).outerHtml());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodeSize())));
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getDefaultPort())));
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outerHtml());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getProtocol());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nodeName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodeSize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).isBlock());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parent());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toString());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).toString());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getProtocol());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).val());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).getName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).val());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).text());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parents().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getPath());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parent());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getFile());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parent());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).toString());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).location());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).ownText());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).hashCode())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingIndex())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).location());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).children().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).id());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isSelfClosing());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tagName());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).classNames().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).className());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parentNode());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parentNode());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).hashCode())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).id());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parent());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).tagName());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).postDataCharset());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).isBlock());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodes().isEmpty());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodeSize())));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).classNames().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).val());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).followRedirects());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).text());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).updateMetaCharsetElement());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).canContainBlock());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).html());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).location());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).cssSelector());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).baseUri());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).className());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).outerHtml());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).id());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getUserInfo());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodeSize())));
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getRef());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).requestBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousElementSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getAuthority());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormListed());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nodeName());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreContentType());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).val());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("UTF8"));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).title());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).asList().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).className());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).dataNodes().isEmpty());
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parentNode());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPort())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).elementSiblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).val());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).contentType());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextSibling());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getQuery());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).isBlock());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getFile());
        Assert.assertEquals(0, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).title());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).size())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormSubmittable());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).hasText());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).indentAmount())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isKnownTag());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parentNode());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).nodeName());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).baseUri());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).validateTLSCertificates());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).textNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).name());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).outerHtml());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).canEncode());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodesCopy().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).location());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).cssSelector());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).outline());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).classNames().isEmpty());
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parentNode());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).className());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodesCopy().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownText());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getUserInfo());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).toString());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).hashCode())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).outerHtml());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).indentAmount())));
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).hasBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).text());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).data());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).prettyPrint());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).text());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).canContainBlock());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).text());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).cssSelector());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).hasText());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).title());
        Assert.assertNull(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).charset());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodes().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).text());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).textNodes().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodeSize())));
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).cssSelector());
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).outline());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingNodes().isEmpty());
        byte[] array_924246133 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_1280460106 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).bodyAsBytes();
        	for(int ii = 0; ii <array_924246133.length; ii++) {
        		org.junit.Assert.assertEquals(array_924246133[ii], array_1280460106[ii]);
        	};
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).name());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getFile());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).text());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getUserInfo());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousSibling());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).data().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("UTF8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).canEncode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).asList().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).className());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).cssSelector());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).charset());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingElements().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).outerHtml());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodeSize())));
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getHost());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextElementSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).displayName());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).title());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isData());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodeSize())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).toString());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPort())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).elementSiblingIndex())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousSibling());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingIndex())));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).isRegistered());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).isBlock());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).cssSelector());
        byte[] array_1780117107 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_1918579922 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).bodyAsBytes();
        	for(int ii = 0; ii <array_1780117107.length; ii++) {
        		org.junit.Assert.assertEquals(array_1780117107[ii], array_1918579922[ii]);
        	};
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).elementSiblingIndex())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodesCopy().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingIndex())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).baseUri());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).children().isEmpty());
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).cssSelector());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).html());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPath());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownText());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).preserveWhitespace());
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).hasBody());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).hashCode())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isInline());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isSelfClosing());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).text());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).hasText());
        Assert.assertFalse(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).hasBody());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).data());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).data());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isBlock());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPath());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getRef());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).body());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getProtocol());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nextSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getAuthority());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).isTrackErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isKnownTag());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).toString());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).html());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getHost());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).location());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormSubmittable());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).val());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingNodes().isEmpty());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getQuery());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).cookies().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).className());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).children().isEmpty());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).toString());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isData());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parents().isEmpty());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingElements().isEmpty());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).elementSiblingIndex())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).toString());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getQuery());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).proxy());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parentNode());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toExternalForm());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).className());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getAuthority());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).getAllElements().isEmpty());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).nodeName());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).displayName());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).body());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isInline());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).contentType());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).baseUri());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataset().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nodeName());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).isBlock());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nodeName());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).hashCode())));
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodeSize())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).baseUri());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).size())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).id());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusCode())));
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).hashCode())));
        Assert.assertEquals(1048576, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).maxBodySize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).val());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).prettyPrint());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).isBlock());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).tagName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).location());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).className());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).getName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).classNames().isEmpty());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).className());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getDefaultPort())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).baseUri());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).baseUri());
        Assert.assertEquals(30000, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).timeout())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parent());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).data());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).isBlock());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).text());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).isBlock());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).children().isEmpty());
        String o_connectWithUrl__4 = con.request().url().toExternalForm();
        Assert.assertEquals("http://example.com", o_connectWithUrl__4);
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).tagName());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).title());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).html());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getDefaultPort())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parent());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).tagName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).hasText());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextElementSibling());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).data());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).outerHtml());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).elementSiblingIndex())));
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).text());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusCode())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parentNode());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodeSize())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).textNodes().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).isRegistered());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toExternalForm());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).text());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).id());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormListed());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).ownText());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousElementSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodeSize())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodes().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).html());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).getAllElements().isEmpty());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).title());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).cookies().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).baseUri());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).data());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).classNames().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).hashCode())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).ownText());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).title());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).name());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataNodes().isEmpty());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).cssSelector());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).name());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).location());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Accept-Encoding"));
        Assert.assertEquals("gzip", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Accept-Encoding"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("User-Agent"));
        Assert.assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("User-Agent"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Content-Type"));
        Assert.assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Content-Type"));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).classNames().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nodeName());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).data());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).preserveWhitespace());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parent());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataNodes().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).baseUri());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).getErrors().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).classNames().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).isBlock());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).className());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).val());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).isBlock());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreHttpErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).className());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getRef());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isEmpty());
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).text());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).val());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nodeName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).outerHtml());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodeSize())));
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getDefaultPort())));
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outerHtml());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getProtocol());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nodeName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodeSize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).isBlock());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parent());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toString());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).toString());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).val());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).getName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).val());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).text());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parent());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parent());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).location());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).ownText());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).hashCode())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousSibling());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).location());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).children().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).id());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isSelfClosing());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tagName());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).classNames().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).className());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parentNode());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).id());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parent());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).postDataCharset());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).isBlock());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodes().isEmpty());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodeSize())));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).classNames().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).val());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).followRedirects());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).text());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).canContainBlock());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).html());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).location());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).cssSelector());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).baseUri());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).className());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).outerHtml());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodeSize())));
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).requestBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousElementSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getAuthority());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormListed());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nodeName());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreContentType());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).val());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("UTF8"));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).title());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).asList().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).className());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).html());
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parentNode());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPort())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).elementSiblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).val());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).contentType());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextSibling());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getQuery());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).isBlock());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getFile());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).title());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).size())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormSubmittable());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).hasText());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).indentAmount())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isKnownTag());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).nodeName());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).baseUri());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).validateTLSCertificates());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).textNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).name());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).outerHtml());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).canEncode());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodesCopy().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).location());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).cssSelector());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).outline());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).classNames().isEmpty());
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parentNode());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).previousSibling());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodesCopy().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownText());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getUserInfo());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).toString());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).hashCode())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).outerHtml());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).indentAmount())));
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).hasBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextSibling());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).text());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).data());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).prettyPrint());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).text());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).canContainBlock());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).text());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).cssSelector());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).hasText());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).title());
        Assert.assertNull(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).charset());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodes().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).text());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodeSize())));
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).cssSelector());
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).outline());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingNodes().isEmpty());
        byte[] array_960144037 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_619987209 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).bodyAsBytes();
        	for(int ii = 0; ii <array_960144037.length; ii++) {
        		org.junit.Assert.assertEquals(array_960144037[ii], array_619987209[ii]);
        	};
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).name());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getFile());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).text());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getUserInfo());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousSibling());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).data().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("UTF8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).canEncode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).asList().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).className());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).cssSelector());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).charset());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingElements().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).outerHtml());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodeSize())));
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getHost());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextElementSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).displayName());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).title());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isData());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).toString());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPort())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).elementSiblingIndex())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousSibling());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingIndex())));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).isRegistered());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).isBlock());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).cssSelector());
        byte[] array_1635508580 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_312752620 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).bodyAsBytes();
        	for(int ii = 0; ii <array_1635508580.length; ii++) {
        		org.junit.Assert.assertEquals(array_1635508580[ii], array_312752620[ii]);
        	};
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).elementSiblingIndex())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodesCopy().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingIndex())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).baseUri());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).children().isEmpty());
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).cssSelector());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).html());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPath());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownText());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).preserveWhitespace());
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).hasBody());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).hashCode())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isInline());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isSelfClosing());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).text());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).hasText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).data());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isBlock());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPath());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getRef());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).body());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getProtocol());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).isTrackErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isKnownTag());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).toString());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).html());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getHost());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).location());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormSubmittable());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataNodes().isEmpty());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getQuery());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).cookies().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).className());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).children().isEmpty());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).toString());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isData());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parents().isEmpty());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingElements().isEmpty());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).elementSiblingIndex())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).toString());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).proxy());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parentNode());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toExternalForm());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).className());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getAuthority());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).getAllElements().isEmpty());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).nodeName());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).displayName());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).body());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isInline());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).contentType());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).baseUri());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataset().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nodeName());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).isBlock());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nodeName());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).hashCode())));
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodeSize())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).baseUri());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).size())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).id());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusCode())));
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).hashCode())));
        Assert.assertEquals(1048576, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).maxBodySize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).val());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).prettyPrint());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).tagName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).hashCode())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).location());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).className());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).getName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).classNames().isEmpty());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).className());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).baseUri());
        Assert.assertEquals(30000, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).timeout())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parent());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).data());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).isBlock());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).text());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).children().isEmpty());
    }

    @Test(timeout = 120000)
    public void data() throws Exception {
        Connection con = HttpConnection.connect("http://example.com/");
        Connection o_data__3 = con.data("Name", "Val", "Foo", "bar");
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).tagName());
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).parents().isEmpty());
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).method()).name());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getProtocol());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isFormListed());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).ownText());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).nodeName());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getDefaultPort())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).dataset().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).baseUri());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).classNames().isEmpty());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).hashCode())));
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).proxy());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).previousSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).dataset().isEmpty());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).toExternalForm());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).dataset().isEmpty());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).parentNode());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).title());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).outerHtml());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).id());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).childNodeSize())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).name());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).dataNodes().isEmpty());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).baseUri());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).tagName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).ownText());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).location());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).classNames().isEmpty());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).postDataCharset());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).children().isEmpty());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).location());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).formatAsBlock());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).toString());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).title());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).elementSiblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).nextSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).toString());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).html());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).className());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).elementSiblingIndex())));
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).contentType());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).body());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).previousSibling());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).baseUri());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).baseUri());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).cookies().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).previousSibling());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).attributes()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).childNodesCopy().isEmpty());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).ownText());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).charset());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownText());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).method()).ordinal())));
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getPath());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).val());
        Assert.assertEquals("Name=Val&Foo=bar", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getQuery());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).siblingIndex())));
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).statusCode())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).outerHtml());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getUserInfo());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).ownText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).text());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).attributes()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).dataNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).childNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).hasText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).hasText());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).baseUri());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).parents().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).text());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).nextSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).childNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).siblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).parent());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).attributes()).asList().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).children().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).className());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).attributes()).size())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).textNodes().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).text());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).text());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).toString());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).outputSettings()).indentAmount())));
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).childNodeSize())));
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).textNodes().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).siblingIndex())));
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).childNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).childNodes().isEmpty());
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).childNodeSize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).cssSelector());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).outputSettings()).prettyPrint());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getPort())));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).classNames().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).title());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).headers().containsKey("Accept-Encoding"));
        Assert.assertEquals("gzip", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).headers().get("Accept-Encoding"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).headers().containsKey("User-Agent"));
        Assert.assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).headers().get("User-Agent"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).headers().containsKey("Content-Type"));
        Assert.assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).headers().get("Content-Type"));
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getUserInfo());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).siblingIndex())));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).canEncode());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).id());
        Assert.assertFalse(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).method()).hasBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).parentNode());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).val());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).isBlock());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).tagName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).className());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).childNodesCopy().isEmpty());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getUserInfo());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).val());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).dataNodes().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).data());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).toString());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).toExternalForm());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).hasText());
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).text());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).statusCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).siblingNodes().isEmpty());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getFile());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).getAllElements().isEmpty());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).hashCode())));
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).attributes()).toString());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).parent());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).childNodeSize())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).siblingIndex())));
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getHost());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isSelfClosing());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getDefaultPort())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).followRedirects());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).elementSiblingIndex())));
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).parent());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).quirksMode()).name());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isKnownTag());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).children().isEmpty());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).toExternalForm());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).method()).hasBody());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).tagName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isFormSubmittable());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).siblingElements().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).outerHtml());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).parent());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).cookies().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).parents().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).html());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).siblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).classNames().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).previousSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).children().isEmpty());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).children().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).ownText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).className());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).parentNode());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).parents().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).siblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).parser()).isTrackErrors());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).text());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).dataNodes().isEmpty());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).quirksMode()).name());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).isBlock());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).data());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isInline());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).validateTLSCertificates());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).previousElementSibling());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).outerHtml());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).text());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getAuthority());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).elementSiblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).elementSiblingIndex())));
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).location());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).dataNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).previousSibling());
        Assert.assertEquals("/?Name=Val&Foo=bar", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getFile());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).className());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isSelfClosing());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).parentNode());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).siblingNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).previousElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).parentNode());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getQuery());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).preserveWhitespace());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).classNames().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).childNodeSize())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).toString());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).location());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).baseUri());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getPort())));
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getProtocol());
        Assert.assertEquals(1048576, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).maxBodySize())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).outerHtml());
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).text());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).data());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).classNames().isEmpty());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).name());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).baseUri());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).outerHtml());
        Assert.assertEquals("GET", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).method()).name());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).parentNode());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).cssSelector());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).aliases().contains("UTF8"));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).nodeName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).tagName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).attributes()).hashCode())));
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).childNodeSize())));
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).childNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).parents().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).childNodesCopy().isEmpty());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getQuery());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).val());
        Assert.assertEquals(0, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).method()).ordinal())));
        Assert.assertNull(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).charset());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).val());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).getAllElements().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).html());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).val());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).data());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).attributes()).asList().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).dataNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).hasText());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getPort())));
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).outputSettings()).prettyPrint());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).elementSiblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).ignoreContentType());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).nextElementSibling());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).toString());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).data());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).siblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).getAllElements().isEmpty());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).toString());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).nodeName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).childNodes().isEmpty());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).nextElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).className());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).text());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).classNames().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).toString());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).siblingNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).text());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).childNodesCopy().isEmpty());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getHost());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).html());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).tagName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).parents().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).nodeName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).parent());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).toString());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).parentNode());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).statusMessage());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).previousElementSibling());
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).hashCode())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).title());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).isBlock());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).val());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).getAllElements().isEmpty());
        Assert.assertEquals(1575608617, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).data().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).parents().isEmpty());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getFile());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).data());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).ownText());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getAuthority());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).baseUri());
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).method()).name());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isData());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).data());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).statusMessage());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).parent());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).dataNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).id());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).parser()).getErrors().isEmpty());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).contentType());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).siblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).className());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).nodeName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).quirksMode()).ordinal())));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).nodeName());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).val());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).outputSettings()).outline());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).classNames().isEmpty());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getRef());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).getAllElements().isEmpty());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getDefaultPort())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).siblingElements().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).canEncode());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).outerHtml());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).className());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).childNodeSize())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).dataset().isEmpty());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).displayName());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).body());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).outerHtml());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).childNodeSize())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).nextElementSibling());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).location());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).childNodeSize())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).quirksMode()).ordinal())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).previousElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).parentNode());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).method()).ordinal())));
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).text());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).updateMetaCharsetElement());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).getName());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).hasText());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).className());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).parentNode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).id());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).cssSelector());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).isRegistered());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).siblingElements().isEmpty());
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).hashCode())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).updateMetaCharsetElement());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).childNodeSize())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).siblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).val());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).children().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).attributes()).toString());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).toString());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isData());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).dataNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).previousSibling());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).getRef());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).data());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).nodeName());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getHost());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).childNodeSize())));
        Assert.assertEquals(30000, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).timeout())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).data());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).nodeName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).tagName());
        Assert.assertEquals(-149642193, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).url()).hashCode())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isKnownTag());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).previousSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).hasText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).id());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).attributes()).hashCode())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).cssSelector());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isFormSubmittable());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).className());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).elementSiblingIndex())));
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).cssSelector());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).isRegistered());
        byte[] array_630434226 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_510123478 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).bodyAsBytes();
        	for(int ii = 0; ii <array_630434226.length; ii++) {
        		org.junit.Assert.assertEquals(array_630434226[ii], array_510123478[ii]);
        	};
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).outputSettings()).indentAmount())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).charset()).displayName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).ownText());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).children().isEmpty());
        Assert.assertEquals(1575608617, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).hashCode())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).outerHtml());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tagName());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).text());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).charset()).aliases().contains("UTF8"));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).childNodeSize())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).attributes()).dataset().isEmpty());
        Assert.assertEquals("http://example.com/?Name=Val&Foo=bar", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).outerHtml());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).ownText());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isFormListed());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).dataset().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).previousSibling());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).nodeName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).tagName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).canContainBlock());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).siblingNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).html());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).getAllElements().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).siblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).previousSibling());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).html());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).nextElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).val());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).outerHtml());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).id());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).classNames().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).nodeName());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getPath());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).childNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).dataset().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).baseUri());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).location());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).val());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).preserveWhitespace());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).html());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).outerHtml());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getProtocol());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).siblingIndex())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).previousElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).attributes()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).isBlock());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).data());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).nextSibling());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).title());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).location());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).ignoreHttpErrors());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).title());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).classNames().isEmpty());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).childNodeSize())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).childNodeSize())));
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).getName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).siblingNodes().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).location());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).id());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).cookies().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).className());
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).method()).hasBody());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).siblingNodes().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).childNodeSize())));
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).nextElementSibling());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getPath());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).canContainBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).childNodesCopy().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).elementSiblingIndex())));
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).tag()).isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).attributes()).size())));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).nodeName());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).url()).getRef());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).getAllElements().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).text());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).empty()).hasText());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).outputSettings()).outline());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).isBlock());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).root()).toString());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)o_data__3).request()).requestBody());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).previousSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).body()).isBlock());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).children().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).parentNode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).dataset().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).ownerDocument()).data());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).head()).isBlock());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).url()).getAuthority());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).hasText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).dataset().isEmpty());
        byte[] array_2086707665 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_1278592644 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).bodyAsBytes();
        	for(int ii = 0; ii <array_2086707665.length; ii++) {
        		org.junit.Assert.assertEquals(array_2086707665[ii], array_1278592644[ii]);
        	};
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).parent());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).empty()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).tag()).isInline());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).head()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).response()).parse()).previousElementSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).normalise()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).normalise()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).body()).dataNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).post()).ownerDocument()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).val());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_data__3).get()).root()).parentNode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)o_data__3).execute()).parse()).textNodes().isEmpty());
        Collection<Connection.KeyVal> values = con.request().data();
        Object[] data = values.toArray();
        Connection.KeyVal one = ((Connection.KeyVal) (data[0]));
        Connection.KeyVal two = ((Connection.KeyVal) (data[1]));
        one.key();
        one.value();
        two.key();
        two.value();
    }

    @Test(timeout = 120000)
    public void headers() throws Exception {
        Connection con = HttpConnection.connect("http://example.com");
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).tagName());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).title());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).html());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getDefaultPort())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodeSize())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parent());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).tagName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).hasText());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextElementSibling());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).data());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).outerHtml());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).elementSiblingIndex())));
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).text());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusCode())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parentNode());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodeSize())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).textNodes().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).isRegistered());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toExternalForm());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).text());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).id());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormListed());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).ownText());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousElementSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodeSize())));
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodes().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).html());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).getAllElements().isEmpty());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).title());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).cookies().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).baseUri());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).data());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).classNames().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).elementSiblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).hashCode())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).ownText());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).location());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).title());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).name());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataNodes().isEmpty());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).cssSelector());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getPort())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).name());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).location());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Accept-Encoding"));
        Assert.assertEquals("gzip", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Accept-Encoding"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("User-Agent"));
        Assert.assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("User-Agent"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Content-Type"));
        Assert.assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Content-Type"));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).classNames().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nodeName());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getHost());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).data());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).preserveWhitespace());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parent());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataNodes().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).baseUri());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).cookies().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).getErrors().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).classNames().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nodeName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).isBlock());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).className());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).val());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).isBlock());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreHttpErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).classNames().isEmpty());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).toExternalForm());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).className());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getRef());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isEmpty());
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).text());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("GET", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).name());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).val());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nodeName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).outerHtml());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodeSize())));
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getDefaultPort())));
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outerHtml());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getProtocol());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nodeName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodeSize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).isBlock());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parent());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toString());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).toString());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getProtocol());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).val());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).getName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).val());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).text());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parents().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getPath());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parent());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getFile());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parent());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).toString());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).location());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).ownText());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).hashCode())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingIndex())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).location());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).children().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).id());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isSelfClosing());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tagName());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).classNames().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).className());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parentNode());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parentNode());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).hashCode())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).id());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parent());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).tagName());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).postDataCharset());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).isBlock());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodes().isEmpty());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodeSize())));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).classNames().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).val());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).followRedirects());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).text());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).updateMetaCharsetElement());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).canContainBlock());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).html());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).location());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).cssSelector());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).baseUri());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).className());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).outerHtml());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).id());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getUserInfo());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodeSize())));
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getRef());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).requestBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousElementSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getAuthority());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormListed());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nodeName());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreContentType());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).val());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("UTF8"));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).title());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).asList().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).className());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).dataNodes().isEmpty());
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parentNode());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPort())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).elementSiblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).val());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).contentType());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextSibling());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getQuery());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).isBlock());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getFile());
        Assert.assertEquals(0, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).title());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).size())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormSubmittable());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).hasText());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).indentAmount())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isKnownTag());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parentNode());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).nodeName());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).baseUri());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).validateTLSCertificates());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).textNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).name());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).outerHtml());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).canEncode());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodesCopy().isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).location());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).cssSelector());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).outline());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).classNames().isEmpty());
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parentNode());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).className());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodesCopy().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownText());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getUserInfo());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).toString());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).hashCode())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).outerHtml());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).indentAmount())));
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).hasBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).text());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).data());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).prettyPrint());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).text());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).canContainBlock());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).text());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).cssSelector());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).hasText());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).title());
        Assert.assertNull(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).charset());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodes().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).text());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).textNodes().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodeSize())));
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).cssSelector());
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).outline());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingNodes().isEmpty());
        byte[] array_1150482841 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_1434614297 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).bodyAsBytes();
        	for(int ii = 0; ii <array_1150482841.length; ii++) {
        		org.junit.Assert.assertEquals(array_1150482841[ii], array_1434614297[ii]);
        	};
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).name());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getFile());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).text());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getUserInfo());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousSibling());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).data().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("UTF8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).canEncode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).asList().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).className());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).cssSelector());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).charset());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingElements().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).outerHtml());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodeSize())));
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getHost());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextElementSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).displayName());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).title());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isData());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodeSize())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).toString());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPort())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).elementSiblingIndex())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousSibling());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingIndex())));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).isRegistered());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).isBlock());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).cssSelector());
        byte[] array_156591366 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_825130495 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).bodyAsBytes();
        	for(int ii = 0; ii <array_156591366.length; ii++) {
        		org.junit.Assert.assertEquals(array_156591366[ii], array_825130495[ii]);
        	};
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).elementSiblingIndex())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodesCopy().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingIndex())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).baseUri());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).children().isEmpty());
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).cssSelector());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).html());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPath());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownText());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).preserveWhitespace());
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).hasBody());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).hashCode())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isInline());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isSelfClosing());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).text());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).hasText());
        Assert.assertFalse(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).hasBody());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).data());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).data());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isBlock());
        Assert.assertEquals("", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPath());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getRef());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).body());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getProtocol());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nextSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getAuthority());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).isTrackErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isKnownTag());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).toString());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).html());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getHost());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).location());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormSubmittable());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).val());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingNodes().isEmpty());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getQuery());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).cookies().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).className());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).children().isEmpty());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).toString());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isData());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parents().isEmpty());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingElements().isEmpty());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).elementSiblingIndex())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).toString());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getQuery());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).proxy());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parentNode());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toExternalForm());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).className());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getAuthority());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).getAllElements().isEmpty());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).nodeName());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).displayName());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).body());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isInline());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).contentType());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).baseUri());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataset().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nodeName());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).isBlock());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nodeName());
        Assert.assertEquals(1575608570, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).hashCode())));
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodeSize())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).baseUri());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).size())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).id());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusCode())));
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).hashCode())));
        Assert.assertEquals(1048576, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).maxBodySize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).val());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).prettyPrint());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).isBlock());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).tagName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isEmpty());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).location());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).className());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).getName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).classNames().isEmpty());
        Assert.assertEquals("http://example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).className());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getDefaultPort())));
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).baseUri());
        Assert.assertEquals("http://example.com", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).baseUri());
        Assert.assertEquals(30000, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).timeout())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parent());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).data());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).isBlock());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).text());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).isBlock());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).children().isEmpty());
        Map<String, String> headers = new HashMap<String, String>();
        headers.put("content-type", "text/html");
        headers.put("Connection", "keep-alive");
        headers.put("Host", "http://example.com");
        con.headers(headers);
        con.request().header("content-type");
        con.request().header("Connection");
        con.request().header("Host");
    }

    @Test(timeout = 120000)
    public void method() throws Exception {
        Connection con = HttpConnection.connect("http://example.com/");
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).tagName());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).title());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).html());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getDefaultPort())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parent());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextElementSibling());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).data());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).outerHtml());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingIndex())));
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusCode())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parentNode());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).textNodes().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).isRegistered());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toExternalForm());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).id());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodes().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).ownText());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).getAllElements().isEmpty());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).title());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).cookies().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).baseUri());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).data());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).classNames().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).hashCode())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).name());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataNodes().isEmpty());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).cssSelector());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).name());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).location());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Accept-Encoding"));
        Assert.assertEquals("gzip", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Accept-Encoding"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("User-Agent"));
        Assert.assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("User-Agent"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Content-Type"));
        Assert.assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Content-Type"));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).data());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nodeName());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataNodes().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).outerHtml());
        Assert.assertTrue(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).getErrors().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).val());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).isBlock());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreHttpErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getRef());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataset().isEmpty());
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).text());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).val());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).outerHtml());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodeSize())));
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getDefaultPort())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outerHtml());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getProtocol());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nodeName());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).isBlock());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parent());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingElements().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).html());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).getName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).val());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parentNode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parent());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parent());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).ownText());
        Assert.assertEquals(1575608617, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).hashCode())));
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).location());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).id());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isSelfClosing());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tagName());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).className());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parentNode());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parentNode());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).baseUri());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).postDataCharset());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).isBlock());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).parents().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).classNames().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).val());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).followRedirects());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).text());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).canContainBlock());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).location());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).hasText());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).baseUri());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).className());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodeSize())));
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).requestBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousElementSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getAuthority());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormListed());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nodeName());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreContentType());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).className());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).html());
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).children().isEmpty());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPort())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).elementSiblingIndex())));
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).contentType());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextSibling());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getQuery());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).isBlock());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getFile());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).isBlock());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).ownText());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).size())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).hasText());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).indentAmount())));
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).nodeName());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).baseUri());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).validateTLSCertificates());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodes().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).canEncode());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).outline());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).previousSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousElementSibling());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodesCopy().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outerHtml());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getUserInfo());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).hashCode())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).outerHtml());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).indentAmount())));
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).hasBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextSibling());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).text());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).data());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).prettyPrint());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).cssSelector());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).text());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).cssSelector());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).title());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).text());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).outline());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingNodes().isEmpty());
        byte[] array_497080696 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_40865201 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).bodyAsBytes();
        	for(int ii = 0; ii <array_497080696.length; ii++) {
        		org.junit.Assert.assertEquals(array_497080696[ii], array_40865201[ii]);
        	};
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).name());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getFile());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getUserInfo());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).data().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("UTF8"));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).asList().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).className());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).cssSelector());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).charset());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingElements().isEmpty());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodeSize())));
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getHost());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextElementSibling());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).title());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).val());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).toString());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPort())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataset().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousSibling());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).isBlock());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).elementSiblingIndex())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).outerHtml());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).children().isEmpty());
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).cssSelector());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).html());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPath());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownText());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).preserveWhitespace());
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).hasBody());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).ordinal())));
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).text());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).classNames().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).data());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPath());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getRef());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).body());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getProtocol());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).isTrackErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isKnownTag());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getHost());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).location());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormSubmittable());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).html());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getQuery());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).cookies().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).children().isEmpty());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).toString());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isData());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parents().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).id());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).elementSiblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).val());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).proxy());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toExternalForm());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getAuthority());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).id());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).getAllElements().isEmpty());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).displayName());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isInline());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataset().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nodeName());
        Assert.assertEquals(1575608617, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).hashCode())));
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodeSize())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).val());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).hashCode())));
        Assert.assertEquals(1048576, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).maxBodySize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).prettyPrint());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).location());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).className());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Content-Encoding"));
        Assert.assertEquals("gzip", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Content-Encoding"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Accept-Ranges"));
        Assert.assertEquals("bytes", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Accept-Ranges"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Cache-Control"));
        Assert.assertEquals("max-age=604800", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Cache-Control"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Content-Type"));
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Content-Type"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Date"));
        Assert.assertEquals("Sat, 09 Jun 2018 14:21:20 GMT", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Date"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Etag"));
        Assert.assertEquals("\"1541025663+gzip\"", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Etag"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Expires"));
        Assert.assertEquals("Sat, 16 Jun 2018 14:21:20 GMT", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Expires"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Last-Modified"));
        Assert.assertEquals("Fri, 09 Aug 2013 23:54:35 GMT", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Last-Modified"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Server"));
        Assert.assertEquals("EOS (vny006/044E)", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Server"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Vary"));
        Assert.assertEquals("Accept-Encoding", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Vary"));
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().containsKey("Content-Length"));
        Assert.assertEquals("606", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).headers().get("Content-Length"));
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).classNames().isEmpty());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toString());
        Assert.assertEquals(30000, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).timeout())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parent());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).text());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parents().isEmpty());
        con.request().method();
        con.method(POST);
        con.request().method();
    }

    @Test(timeout = 120000)
    public void timeout() throws Exception {
        Connection con = HttpConnection.connect("http://example.com/");
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).tagName());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).title());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).html());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getDefaultPort())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodeSize())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parent());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).tagName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).hasText());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextElementSibling());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).data());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).outerHtml());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).elementSiblingIndex())));
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).text());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusCode())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parentNode());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodeSize())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).textNodes().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).isRegistered());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toExternalForm());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).text());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).id());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormListed());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).ownText());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousElementSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodeSize())));
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodes().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).html());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parent());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).getAllElements().isEmpty());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).title());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).cookies().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).baseUri());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).data());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).updateMetaCharsetElement());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).classNames().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).elementSiblingIndex())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).hashCode())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).ownText());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).location());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).title());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).name());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataNodes().isEmpty());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).cssSelector());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getPort())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).name());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).location());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Accept-Encoding"));
        Assert.assertEquals("gzip", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Accept-Encoding"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("User-Agent"));
        Assert.assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("User-Agent"));
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().containsKey("Content-Type"));
        Assert.assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).headers().get("Content-Type"));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).classNames().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nodeName());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getHost());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).data());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).preserveWhitespace());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parent());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataNodes().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).baseUri());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).cookies().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).getErrors().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).classNames().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nodeName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).isBlock());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).className());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).val());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).isBlock());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreHttpErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).classNames().isEmpty());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).toExternalForm());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).children().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).className());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getRef());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isEmpty());
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).text());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("GET", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).name());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).val());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nodeName());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).outerHtml());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).textNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).id());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodeSize())));
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getDefaultPort())));
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outerHtml());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getProtocol());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nodeName());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).elementSiblingIndex())));
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodeSize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).isBlock());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).baseUri());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parent());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toString());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).toString());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getProtocol());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).val());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).siblingNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).getName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).val());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).text());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).parents().isEmpty());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getPath());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parent());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getFile());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).parent());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).toString());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).location());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).ownText());
        Assert.assertEquals(1575608617, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).hashCode())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingIndex())));
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).location());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parent());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).children().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).id());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).childNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nodeName());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isSelfClosing());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tagName());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).classNames().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).parentNode());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).className());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parentNode());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parentNode());
        Assert.assertEquals(1575608617, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).hashCode())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).id());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).baseUri());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parent());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).tagName());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).postDataCharset());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).isBlock());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodes().isEmpty());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodeSize())));
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).nodeName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).getAllElements().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).outerHtml());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).classNames().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).val());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).followRedirects());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).text());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).updateMetaCharsetElement());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).updateMetaCharsetElement());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).canContainBlock());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).html());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).location());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).hasText());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).cssSelector());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).baseUri());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).title());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).className());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).outerHtml());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).id());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getUserInfo());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).childNodeSize())));
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getRef());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).requestBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousElementSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getAuthority());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormListed());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nodeName());
        Assert.assertFalse(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).ignoreContentType());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).val());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).aliases().contains("UTF8"));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).title());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).asList().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).className());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).className());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).siblingElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).dataNodes().isEmpty());
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).parentNode());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPort())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).elementSiblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).val());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).contentType());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).nextSibling());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getQuery());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).childNodesCopy().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).isBlock());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getFile());
        Assert.assertEquals(0, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).ordinal())));
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).title());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).dataNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).data());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).getAllElements().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).id());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).size())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isFormSubmittable());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).hasText());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).indentAmount())));
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isKnownTag());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parentNode());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).nodeName());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).baseUri());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).validateTLSCertificates());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).previousElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).elementSiblingIndex())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).textNodes().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).nextSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).name());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tagName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).outerHtml());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).canEncode());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodesCopy().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).location());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).cssSelector());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).outline());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).classNames().isEmpty());
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parentNode());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextElementSibling());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).className());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).siblingNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodesCopy().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).cssSelector());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownText());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getUserInfo());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).toString());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).hashCode())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).outerHtml());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).indentAmount())));
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).hasBody());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).text());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).data());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).prettyPrint());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).cssSelector());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).previousSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).toString());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).text());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).formatAsBlock());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).classNames().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).canContainBlock());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataNodes().isEmpty());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).text());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).cssSelector());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).hasText());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).title());
        Assert.assertNull(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).charset());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodes().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).hasText());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).text());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).textNodes().isEmpty());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodeSize())));
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).cssSelector());
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).childNodeSize())));
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).outputSettings()).outline());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).ownText());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingNodes().isEmpty());
        byte[] array_1990166463 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_1391374059 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).bodyAsBytes();
        	for(int ii = 0; ii <array_1990166463.length; ii++) {
        		org.junit.Assert.assertEquals(array_1990166463[ii], array_1391374059[ii]);
        	};
        Assert.assertEquals("POST", ((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).name());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getFile());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingNodes().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).text());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getUserInfo());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).previousSibling());
        Assert.assertTrue(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).data().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).aliases().contains("UTF8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).canEncode());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).children().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).asList().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).isBlock());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).ownText());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).className());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).cssSelector());
        Assert.assertEquals("UTF-8", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).charset());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingElements().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).outerHtml());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodeSize())));
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getHost());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).nextSibling());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).nextElementSibling());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).displayName());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).title());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isData());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).className());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).val());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextSibling());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).childNodeSize())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).toString());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPort())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).parents().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).dataset().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).elementSiblingIndex())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).cssSelector());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).previousSibling());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).tagName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).childNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).siblingIndex())));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).isRegistered());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).isBlock());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).cssSelector());
        byte[] array_986292459 = new byte[]{60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 116, 105, 116, 108, 101, 62, 10, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 119, 105, 100, 116, 104, 61, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 105, 110, 105, 116, 105, 97, 108, 45, 115, 99, 97, 108, 101, 61, 49, 34, 32, 47, 62, 10, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 10, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 48, 102, 48, 102, 50, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 79, 112, 101, 110, 32, 83, 97, 110, 115, 34, 44, 32, 34, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 54, 48, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 53, 101, 109, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 53, 48, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 97, 58, 108, 105, 110, 107, 44, 32, 97, 58, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 58, 32, 35, 51, 56, 52, 56, 56, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 64, 109, 101, 100, 105, 97, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 55, 48, 48, 112, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 102, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 118, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 97, 114, 103, 105, 110, 58, 32, 48, 32, 97, 117, 116, 111, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 101, 109, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 32, 32, 32, 32, 10, 60, 47, 104, 101, 97, 100, 62, 10, 10, 60, 98, 111, 100, 121, 62, 10, 60, 100, 105, 118, 62, 10, 32, 32, 32, 32, 60, 104, 49, 62, 69, 120, 97, 109, 112, 108, 101, 32, 68, 111, 109, 97, 105, 110, 60, 47, 104, 49, 62, 10, 32, 32, 32, 32, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 109, 97, 105, 110, 32, 105, 115, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 101, 100, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 118, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 105, 110, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 46, 32, 89, 111, 117, 32, 109, 97, 121, 32, 117, 115, 101, 32, 116, 104, 105, 115, 10, 32, 32, 32, 32, 100, 111, 109, 97, 105, 110, 32, 105, 110, 32, 101, 120, 97, 109, 112, 108, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 112, 114, 105, 111, 114, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 105, 111, 110, 32, 111, 114, 32, 97, 115, 107, 105, 110, 103, 32, 102, 111, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 46, 60, 47, 112, 62, 10, 32, 32, 32, 32, 60, 112, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 97, 110, 97, 46, 111, 114, 103, 47, 100, 111, 109, 97, 105, 110, 115, 47, 101, 120, 97, 109, 112, 108, 101, 34, 62, 77, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 60, 47, 97, 62, 60, 47, 112, 62, 10, 60, 47, 100, 105, 118, 62, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10};
        	byte[] array_60832105 = (byte[])((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).bodyAsBytes();
        	for(int ii = 0; ii <array_986292459.length; ii++) {
        		org.junit.Assert.assertEquals(array_986292459[ii], array_60832105[ii]);
        	};
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).elementSiblingIndex())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).childNodesCopy().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).data());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingIndex())));
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).baseUri());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).text());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).children().isEmpty());
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).cssSelector());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).siblingIndex())));
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).html());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getPath());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownText());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).preserveWhitespace());
        Assert.assertTrue(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).method()).hasBody());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).hashCode())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).quirksMode()).ordinal())));
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isInline());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isSelfClosing());
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).text());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).hasText());
        Assert.assertFalse(((org.jsoup.Connection.Method)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).method()).hasBody());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).data());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).data());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).isBlock());
        Assert.assertEquals("/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getPath());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).getRef());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).hasText());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).body());
        Assert.assertEquals("http", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getProtocol());
        Assert.assertNull(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).nextSibling());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getAuthority());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Parser)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).parser()).isTrackErrors());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).siblingElements().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nextSibling());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isKnownTag());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).toString());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nextSibling());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).html());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getHost());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).location());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isFormSubmittable());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).val());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).html());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).siblingNodes().isEmpty());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getQuery());
        Assert.assertTrue(((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).cookies().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).className());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).children().isEmpty());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).toString());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isData());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parents().isEmpty());
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).outerHtml());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).nextElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).id());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).siblingElements().isEmpty());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).elementSiblingIndex())));
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).charset()).toString());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).parents().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).dataset().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).dataset().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).toString());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).html());
        Assert.assertNull(((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getQuery());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).getAllElements().isEmpty());
        Assert.assertNull(((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).proxy());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).parentNode());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).toExternalForm());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).className());
        Assert.assertEquals("example.com", ((java.net.URL)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).url()).getAuthority());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).id());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).siblingIndex())));
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).outerHtml());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).getAllElements().isEmpty());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).nodeName());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).charset()).displayName());
        Assert.assertEquals("<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is established to be used for illustrative examples in documents. You may use this\n    domain in examples without prior coordination or asking for permission.</p>\n    <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).body());
        Assert.assertTrue(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isInline());
        Assert.assertEquals("text/html", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).contentType());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).baseUri());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataset().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).nodeName());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).isBlock());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).nodeName());
        Assert.assertEquals(1575608617, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).hashCode())));
        Assert.assertEquals(11, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodeSize())));
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).baseUri());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).size())));
        Assert.assertEquals("<head> \n <title>Example Domain</title> \n <meta charset=\"utf-8\"> \n <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n</head>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodes().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).val());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).classNames().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).siblingNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).childNodesCopy().isEmpty());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).id());
        Assert.assertEquals(200, ((int) (((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusCode())));
        Assert.assertEquals(-375097755, ((int) (((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).hashCode())));
        Assert.assertEquals(1048576, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).maxBodySize())));
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).val());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).outputSettings()).prettyPrint());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).isBlock());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).tagName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).childNodes().isEmpty());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).nodeName());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).ownerDocument()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).toString());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).attributes()).hashCode())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).childNodesCopy().isEmpty());
        Assert.assertFalse(((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).location());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).nextElementSibling());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).tag()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).className());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).body()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).body()).nextElementSibling());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).root()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).normalise()).textNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Node)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).root()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).empty()).dataNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).getName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).children().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.parser.Tag)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).tag()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).classNames().isEmpty());
        Assert.assertEquals("http://example.com/", ((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).url()).toString());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).className());
        Assert.assertEquals(80, ((int) (((java.net.URL)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).url()).getDefaultPort())));
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).baseUri());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).baseUri());
        Assert.assertEquals(30000, ((int) (((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).timeout())));
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).normalise()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Attributes)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).attributes()).dataset().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parent());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).data());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).head()).isBlock());
        Assert.assertEquals("OK", ((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).statusMessage());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).getAllElements().isEmpty());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).post()).head()).text());
        Assert.assertEquals(1, ((int) (((org.jsoup.Connection.Method)((org.jsoup.Connection.Request)((org.jsoup.helper.HttpConnection)con).request()).method()).ordinal())));
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).response()).parse()).parents().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).empty()).isBlock());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.Connection.Response)((org.jsoup.helper.HttpConnection)con).execute()).parse()).html());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)con).get()).ownerDocument()).children().isEmpty());
        int int_0 = 30 * 1000;
        int o_timeout__4 = con.request().timeout();
        Assert.assertEquals(30000, ((int) (o_timeout__4)));
        Connection o_timeout__6 = con.timeout(1000);
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).nextSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).siblingNodes().isEmpty());
        Assert.assertEquals(5, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).childNodeSize())));
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).location());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).outputSettings()).indentAmount())));
        Assert.assertEquals("html > body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).cssSelector());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).displayName());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).dataset().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).getAllElements().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).textNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).outputSettings()).prettyPrint());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).quirksMode()).ordinal())));
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).children().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).aliases().contains("unicode-1-1-utf-8"));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).aliases().contains("UTF8"));
        Assert.assertEquals("Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).text());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).textNodes().isEmpty());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).baseUri());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).siblingIndex())));
        Assert.assertEquals("Example Domain Example Domain This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission. More information...", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).text());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).val());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).title());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).name());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).childNodesCopy().isEmpty());
        Assert.assertEquals(1, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).elementSiblingIndex())));
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).isRegistered());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).outerHtml());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).ownText());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).baseUri());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).children().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).parent());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).toString());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).outerHtml());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).childNodeSize())));
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).val());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).classNames().isEmpty());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).previousSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).siblingElements().isEmpty());
        Assert.assertTrue(((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).canEncode());
        Assert.assertEquals("Example Domain", ((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).title());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).getAllElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).dataNodes().isEmpty());
        Assert.assertEquals("UTF-8", ((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).toString());
        Assert.assertEquals("#document", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).parents().isEmpty());
        Assert.assertEquals("\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    ", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).data());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).data());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).previousElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).childNodes().isEmpty());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).cssSelector());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).siblingNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).elementSiblingIndex())));
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).nextElementSibling());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).ownText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).id());
        Assert.assertNull(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).parentNode());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).updateMetaCharsetElement());
        Assert.assertEquals("#root", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).tagName());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).previousElementSibling());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).hasText());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).nodeName());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).nextSibling());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).textNodes().isEmpty());
        Assert.assertEquals(0, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).elementSiblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).dataNodes().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).siblingElements().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).isBlock());
        Assert.assertEquals(2, ((int) (((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).siblingIndex())));
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).isBlock());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).isBlock());
        Assert.assertNull(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).nextElementSibling());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).updateMetaCharsetElement());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).id());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).dataset().isEmpty());
        Assert.assertEquals("<div> \n <h1>Example Domain</h1> \n <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n</div>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).html());
        Assert.assertFalse(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).getAllElements().isEmpty());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).tagName());
        Assert.assertEquals("", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).className());
        Assert.assertEquals("<title>Example Domain</title> \n<meta charset=\"utf-8\"> \n<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n<style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).html());
        Assert.assertEquals("html > head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).cssSelector());
        Assert.assertEquals(81070450, ((int) (((java.nio.charset.Charset)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).charset()).hashCode())));
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).toString());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).dataset().isEmpty());
        Assert.assertEquals("<!doctype html>\n<html>\n <head> \n  <title>Example Domain</title> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <style type=\"text/css\">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        body {\n            background-color: #fff;\n        }\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style> \n </head> \n <body> \n  <div> \n   <h1>Example Domain</h1> \n   <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n   <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n  </div>   \n </body>\n</html>", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).html());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).dataNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).hasText());
        Assert.assertEquals("", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).className());
        Assert.assertEquals("http://example.com/", ((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).location());
        Assert.assertEquals("noQuirks", ((org.jsoup.nodes.Document.QuirksMode)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).quirksMode()).name());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).childNodes().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).classNames().isEmpty());
        Assert.assertFalse(((org.jsoup.nodes.Document.OutputSettings)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).outputSettings()).outline());
        Assert.assertEquals("<body> \n <div> \n  <h1>Example Domain</h1> \n  <p>This domain is established to be used for illustrative examples in documents. You may use this domain in examples without prior coordination or asking for permission.</p> \n  <p><a href=\"http://www.iana.org/domains/example\">More information...</a></p> \n </div>   \n</body>", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).outerHtml());
        Assert.assertEquals("body", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).body()).nodeName());
        Assert.assertFalse(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).childNodesCopy().isEmpty());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).parents().isEmpty());
        Assert.assertEquals("head", ((org.jsoup.nodes.Element)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).head()).tagName());
        Assert.assertTrue(((org.jsoup.nodes.Document)((org.jsoup.nodes.Document)((org.jsoup.helper.HttpConnection)o_timeout__6).post()).normalise()).siblingElements().isEmpty());
        con.request().timeout();
    }
}

