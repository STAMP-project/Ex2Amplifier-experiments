@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE713() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(1);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(1, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE714() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(1);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(0, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE715() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(0);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(1, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE716() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(0);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(0, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE717() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(1);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(1, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE718() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(1);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(0, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE719() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(0);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(1, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostWithBlogWithCompositeKey_Ex2_JBSE720() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectBlogByIdAndAuthor(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPost = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostWithBlogByAuthorMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPost);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPost, 2, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(1, posts.size());
        org.apache.ibatis.domain.blog.Post post = posts.get(0);
        org.junit.Assert.assertNotNull(post.getBlog());
        org.junit.Assert.assertEquals(0, post.getBlog().getAuthor().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}