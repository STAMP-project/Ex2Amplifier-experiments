@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE70() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(1, posts.get(1).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE71() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(1, posts.get(0).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE72() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(0, posts.get(1).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE73() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(0, posts.get(0).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE74() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(1, posts.get(1).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE75() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(1, posts.get(0).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE76() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(0, posts.get(1).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldFetchPostsForBlog_Ex2_JBSE77() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectBlog = org.apache.ibatis.executor.ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(this.config);
        org.apache.ibatis.mapping.MappedStatement selectPosts = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectPostsForBlogMappedStatement(this.config);
        this.config.addMappedStatement(selectBlog);
        this.config.addMappedStatement(selectPosts);
        java.util.List<org.apache.ibatis.domain.blog.Post> posts = executor.query(selectPosts, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        org.junit.Assert.assertEquals(2, posts.size());
        org.junit.Assert.assertTrue(((posts.get(1)) instanceof javassist.util.proxy.Proxy));
        org.junit.Assert.assertNotNull(posts.get(1).getBlog());
        org.junit.Assert.assertEquals(0, posts.get(0).getBlog().getId());
        executor.rollback(true);
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}