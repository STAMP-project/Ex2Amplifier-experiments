@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE109() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE110() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE111() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE112() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE113() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE114() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE115() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE116() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE117() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE118() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE119() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE120() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE121() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE122() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE123() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE124() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE125() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE126() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE127() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE128() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE129() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE130() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE131() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE132() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE133() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE134() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE135() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE136() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE137() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE138() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE139() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE140() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE141() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE142() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE143() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE144() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE145() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE146() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE147() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE148() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE149() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE150() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE151() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE152() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE153() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE154() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE155() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE156() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE157() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE158() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE159() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE160() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE161() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE162() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE163() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE164() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE165() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE166() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE167() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE168() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE169() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE170() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE171() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE172() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE173() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(1);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE174() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE175() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(1);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldMapConstructorResults_Ex2_JBSE176() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectOneAuthorMappedStatementWithConstructorResults(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 102, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        executor.flushStatements();
        executor.rollback(true);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(102, author.getId());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}