@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE394() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE395() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE396() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE397() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE398() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE399() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE400() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE401() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE402() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE403() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE404() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE405() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE406() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE407() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE408() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE409() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE410() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE411() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE412() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE413() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE414() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE415() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE416() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE417() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE418() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE419() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE420() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE421() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE422() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE423() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE424() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE425() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE426() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE427() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE428() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE429() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE430() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE431() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE432() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE433() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE434() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE435() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE436() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE437() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE438() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE439() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE440() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE441() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE442() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE443() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE444() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE445() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE446() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE447() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE448() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE449() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE450() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE451() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE452() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE453() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE454() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE455() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, null, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE456() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE457() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE458() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE459() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 1, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE460() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(1, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectAllAuthorsAutoMapped_Ex2_JBSE461() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectAllAuthorsAutoMappedStatement(this.config);
        java.util.List<org.apache.ibatis.domain.blog.Author> authors = executor.query(selectStatement, 0, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(0, authors.size());
        org.apache.ibatis.domain.blog.Author author = authors.get(0);
        org.junit.Assert.assertEquals(101, author.getId());
        org.junit.Assert.assertEquals("jim", author.getUsername());
        org.junit.Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
        org.junit.Assert.assertEquals("", author.getBio());
        org.junit.Assert.assertEquals(org.apache.ibatis.domain.blog.Section.NEWS, author.getFavouriteSection());
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}