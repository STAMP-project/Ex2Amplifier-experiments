@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE791() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE792() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE793() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE794() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE795() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE796() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE797() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE798() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE799() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE800() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE801() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE802() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE803() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE804() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE805() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE806() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE807() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE808() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE809() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE810() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE811() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE812() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE813() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE814() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE815() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE816() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE817() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE818() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE819() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE820() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE821() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE822() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE823() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE824() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE825() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE826() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE827() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE828() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE829() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE830() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE831() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE832() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE833() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE834() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE835() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE836() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE837() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE838() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE839() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE840() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE841() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE842() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE843() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE844() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE845() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE846() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE847() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE848() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE849() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE850() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE851() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE852() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 101);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE853() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE854() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put("id2", 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE855() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put(1, 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE856() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 1);
                put(0, 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE857() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put(1, 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}
@org.junit.Test(timeout = 120000)
public void shouldSelectTwoSetsOfAuthorsViaProc_Ex2_JBSE858() throws java.lang.Exception {
    org.apache.ibatis.executor.Executor executor = createExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(org.apache.ibatis.executor.BaseExecutorTest.ds, null, false));
    try {
        org.apache.ibatis.mapping.MappedStatement selectStatement = org.apache.ibatis.executor.ExecutorTestHelper.prepareSelectTwoSetsOfAuthorsProc(this.config);
        java.util.List<java.util.List<org.apache.ibatis.domain.blog.Author>> authorSets = executor.query(selectStatement, new java.util.HashMap<java.lang.String, java.lang.Object>() {
            {
                put("id1", 0);
                put(0, 102);
            }
        }, org.apache.ibatis.session.RowBounds.DEFAULT, org.apache.ibatis.executor.Executor.NO_RESULT_HANDLER);
        org.junit.Assert.assertEquals(2, authorSets.size());
        for (java.util.List<org.apache.ibatis.domain.blog.Author> authors : authorSets) {
            org.junit.Assert.assertEquals(2, authors.size());
            for (java.lang.Object author : authors) {
                org.junit.Assert.assertTrue((author instanceof org.apache.ibatis.domain.blog.Author));
            }
        }
    } finally {
        executor.rollback(true);
        executor.close(false);
    }
}