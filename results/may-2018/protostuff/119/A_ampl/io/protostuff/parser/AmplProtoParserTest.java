package io.protostuff.parser;


import Field.Bool;
import Field.Bytes;
import Field.Double;
import Field.Float;
import Field.Int32;
import Field.Int64;
import TextFormat.ISO_8859_1;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import org.junit.Assert;
import org.junit.Test;

import static Modifier.OPTIONAL;
import static Modifier.REPEATED;
import static Modifier.REQUIRED;


public class AmplProtoParserTest {
    static URL getResource(String path) throws IOException {
        return Thread.currentThread().getContextClassLoader().getResource(path);
    }

    static File getFile(String path) {
        return new File(new File("src/test/resources"), path);
    }

    @Test(timeout = 10000)
    public void testDescriptorProto() throws Exception {
        File f = AmplProtoParserTest.getFile("descriptor.proto");
        boolean o_testDescriptorProto__3 = f.exists();
        Assert.assertTrue(o_testDescriptorProto__3);
        Proto proto = new Proto(f);
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals((-1693972289), ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).lastModified())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getParent());
        Assert.assertNull(getMutablePackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getPath());
        Assert.assertEquals((-2089994826), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).createNewFile());
        Assert.assertEquals("descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getName());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isHidden());
        Assert.assertTrue(isEmptyA());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isHidden());
        Assert.assertEquals(227478868, ((int) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).hashCode())));
        Assert.assertEquals((-1244353054), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).hashCode())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertTrue(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertEquals("descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getName());
        Assert.assertTrue(((Collection) (getMessages())).isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).listFiles());
        Assert.assertEquals("descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getName());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isAbsolute());
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getCanonicalPath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isDirectory());
        Assert.assertEquals("src/test/resources/descriptor.proto", getSourcePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", getSourcePath());
        Assert.assertFalse(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isOpaque());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdir());
        Assert.assertEquals("file", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toString());
        Assert.assertNull(getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPath());
        Assert.assertEquals(227478868, ((int) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).hashCode())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isAbsolute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getSchemeSpecificPart());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).list());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isHidden());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).toString());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertNull(getMutablePackageName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdirs());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).exists());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).setReadOnly());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canRead());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getCanonicalPath());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getCanonicalPath());
        Assert.assertEquals((-1), ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPort())));
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getCanonicalPath());
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getParent());
        Assert.assertEquals(17087L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).length())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canExecute());
        Assert.assertEquals("descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getName());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getUserInfo());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canWrite());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isAbsolute());
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawPath());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).delete());
        Assert.assertFalse(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParent());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).createNewFile());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getRef());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).toString());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getAuthority());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getFragment());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getUsableSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isFile());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).toString());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertEquals(0, ((int) (((Collection) (getMessages())).size())));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getFreeSpace())));
        Assert.assertTrue(((Collection) (getMessages())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getNameCount())));
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isDirectory());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).exists());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPort())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isDirectory());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getDefaultPort())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).setReadOnly());
        Assert.assertEquals("src/test/resources/descriptor.proto", getSourcePath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canWrite());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toExternalForm());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdir());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canWrite());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).lastModified())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).setReadOnly());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getTotalSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).setReadOnly());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getUsableSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdirs());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isAbsolute());
        Assert.assertTrue(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isAbsolute());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).listFiles());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getUserInfo());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).createNewFile());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).listFiles());
        Assert.assertEquals("file", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getScheme());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).createNewFile());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawQuery());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertEquals((-2094033494), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).hashCode())));
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (getProto())).toString());
        Assert.assertEquals(228448453, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).hashCode())));
        Assert.assertEquals(17087L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getFile());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getFreeSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawUserInfo());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getAuthority());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPath());
        Assert.assertFalse(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canRead());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).delete());
        Assert.assertEquals("resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).delete());
        Assert.assertEquals(17087L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).length())));
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).listFiles());
        Assert.assertEquals(0, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getFreeSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canExecute());
        Assert.assertNull(getPackageName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canRead());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canRead());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getHost());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).delete());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).exists());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getQuery());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdirs());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getMessages())).size())));
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getQuery());
        Assert.assertEquals(17087L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).length())));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getFreeSpace())));
        Assert.assertEquals((-2094033494), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).hashCode())));
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toString());
        Assert.assertEquals("src/test", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getParent());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).setReadOnly());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isAbsolute());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getAbsolutePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).toString());
        Assert.assertNull(getMutablePackageName());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toString());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (getProto())).toString());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertFalse(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).isAbsolute());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isFile());
        Assert.assertTrue(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertNull(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getRoot());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (proto)).toString());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getAbsolutePath());
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).lastModified())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).createNewFile());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canExecute());
        Assert.assertNull(getPackageName());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertEquals(0, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).lastModified())));
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toASCIIString());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getTotalSpace())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawFragment());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getPath());
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getParent());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawAuthority());
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).toString());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canWrite());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getPath());
        ProtoUtil.loadFrom(f, proto);
        proto.getPackageName();
        Assert.assertTrue(o_testDescriptorProto__3);
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(getO().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getO().get("java_package"));
        Assert.assertTrue(getO().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getO().get("java_outer_classname"));
        Assert.assertTrue(getO().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getO().get("optimize_for"));
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals((-1693972289), ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).lastModified())));
        Assert.assertEquals((-1976051905), ((int) (((Set) (((Map) (getMessageMap())).keySet())).hashCode())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getParent());
        Assert.assertTrue(getO().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getO().get("java_package"));
        Assert.assertTrue(getO().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getO().get("java_outer_classname"));
        Assert.assertTrue(getO().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getO().get("optimize_for"));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getPath());
        Assert.assertEquals((-2089994826), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).createNewFile());
        Assert.assertEquals("descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getName());
        Assert.assertEquals("com.google.protobuf", getValue());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isHidden());
        Assert.assertTrue(isEmptyA());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isHidden());
        Assert.assertEquals(227478868, ((int) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).hashCode())));
        Assert.assertEquals((-1244353054), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).hashCode())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertTrue(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertTrue(getStandardOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getStandardOptions().get("optimize_for"));
        Assert.assertTrue(getO().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getO().get("java_package"));
        Assert.assertTrue(getO().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getO().get("java_outer_classname"));
        Assert.assertTrue(getO().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getO().get("optimize_for"));
        Assert.assertEquals("descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getName());
        Assert.assertFalse(((Collection) (getMessages())).isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).listFiles());
        Assert.assertEquals("descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getName());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isAbsolute());
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getCanonicalPath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isDirectory());
        Assert.assertEquals("src/test/resources/descriptor.proto", getSourcePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", getSourcePath());
        Assert.assertFalse(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isOpaque());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdir());
        Assert.assertEquals("file", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toString());
        Assert.assertEquals("google.protobuf", getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPath());
        Assert.assertEquals(227478868, ((int) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).hashCode())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getTotalSpace())));
        Assert.assertEquals(16, ((int) (((Map) (getMessageMap())).size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isAbsolute());
        Assert.assertTrue(getExtraOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getExtraOptions().get("java_package"));
        Assert.assertTrue(getExtraOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getExtraOptions().get("java_outer_classname"));
        Assert.assertTrue(getExtraOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getExtraOptions().get("optimize_for"));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getSchemeSpecificPart());
        Assert.assertEquals(16, ((int) (((Collection) (((Map) (getMessageMap())).values())).size())));
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).list());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isHidden());
        Assert.assertNull(getLast());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).toString());
        Assert.assertEquals("google.protobuf", getOriginalPackageName());
        Assert.assertFalse(isOverridden());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdirs());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).exists());
        Assert.assertTrue(getStandardOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getStandardOptions().get("optimize_for"));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).setReadOnly());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canRead());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getUsableSpace())));
        Assert.assertTrue(getOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getOptions().get("java_package"));
        Assert.assertTrue(getOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getOptions().get("java_outer_classname"));
        Assert.assertTrue(getOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getOptions().get("optimize_for"));
        Assert.assertEquals(16, ((int) (((Map) (getMessageMap())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getCanonicalPath());
        Assert.assertEquals(16, ((int) (((Set) (((Map) (getMessageMap())).keySet())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getCanonicalPath());
        Assert.assertEquals((-1), ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPort())));
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getCanonicalPath());
        Assert.assertFalse(((Set) (((Map) (getMessageMap())).keySet())).isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getParent());
        Assert.assertEquals(17087L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).length())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canExecute());
        Assert.assertEquals("descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getName());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getUserInfo());
        Assert.assertFalse(isOverridden());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canWrite());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isAbsolute());
        Assert.assertTrue(getExtraOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getExtraOptions().get("java_package"));
        Assert.assertTrue(getExtraOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getExtraOptions().get("java_outer_classname"));
        Assert.assertTrue(getExtraOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getExtraOptions().get("optimize_for"));
        Assert.assertFalse(((Map) (getMessageMap())).isEmpty());
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawPath());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).delete());
        Assert.assertFalse(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParent());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).createNewFile());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getRef());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).toString());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getAuthority());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getFragment());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getUsableSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isFile());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).toString());
        Assert.assertEquals("com.google.protobuf", getOriginalJavaPackageName());
        Assert.assertEquals(16, ((int) (((Collection) (getMessages())).size())));
        Assert.assertEquals("com.google.protobuf", getValue());
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getFreeSpace())));
        Assert.assertFalse(((Collection) (getMessages())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getNameCount())));
        Assert.assertEquals("google.protobuf", getValue());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isDirectory());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).exists());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPort())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isDirectory());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getDefaultPort())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).setReadOnly());
        Assert.assertEquals("google.protobuf", getValue());
        Assert.assertEquals("src/test/resources/descriptor.proto", getSourcePath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canWrite());
        Assert.assertEquals("google.protobuf", getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toExternalForm());
        Assert.assertTrue(getOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getOptions().get("java_package"));
        Assert.assertTrue(getOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getOptions().get("java_outer_classname"));
        Assert.assertTrue(getOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getOptions().get("optimize_for"));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdir());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canWrite());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).lastModified())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).setReadOnly());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getTotalSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).setReadOnly());
        Assert.assertFalse(((Set) (((Map) (getMessageMap())).entrySet())).isEmpty());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getUsableSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdirs());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isAbsolute());
        Assert.assertTrue(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isAbsolute());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).listFiles());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getUserInfo());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).createNewFile());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).listFiles());
        Assert.assertEquals("file", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getScheme());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).createNewFile());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawQuery());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertEquals((-2094033494), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).hashCode())));
        Assert.assertNull(getLast());
        Assert.assertEquals(228448453, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).hashCode())));
        Assert.assertEquals(17087L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getFile());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(getOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getOptions().get("java_package"));
        Assert.assertTrue(getOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getOptions().get("java_outer_classname"));
        Assert.assertTrue(getOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getOptions().get("optimize_for"));
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getFreeSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("com.google.protobuf", getOriginalJavaPackageName());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawUserInfo());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getAuthority());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPath());
        Assert.assertFalse(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canRead());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).delete());
        Assert.assertEquals("resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).delete());
        Assert.assertEquals(17087L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).length())));
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).listFiles());
        Assert.assertEquals(0, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertNull(getLast());
        Assert.assertTrue(getStandardOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getStandardOptions().get("optimize_for"));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getFreeSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canExecute());
        Assert.assertEquals("google.protobuf", getPackageName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canRead());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canRead());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getHost());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).delete());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).exists());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getQuery());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdirs());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("com.google.protobuf", getJavaPackageName());
        Assert.assertEquals(16, ((int) (((Collection) (getMessages())).size())));
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertEquals("com.google.protobuf", getOriginalJavaPackageName());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getQuery());
        Assert.assertEquals(17087L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).length())));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getFreeSpace())));
        Assert.assertEquals((-2094033494), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).hashCode())));
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toString());
        Assert.assertEquals("src/test", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getParent());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).setReadOnly());
        Assert.assertEquals("com.google.protobuf", getJavaPackageName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isAbsolute());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getAbsolutePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).toString());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toString());
        Assert.assertEquals("google.protobuf", getOriginalPackageName());
        Assert.assertFalse(isOverridden());
        Assert.assertFalse(((Collection) (((Map) (getMessageMap())).values())).isEmpty());
        Assert.assertFalse(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).isAbsolute());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isFile());
        Assert.assertTrue(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertNull(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getRoot());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getAbsolutePath());
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).lastModified())));
        Assert.assertTrue(getExtraOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", getExtraOptions().get("java_package"));
        Assert.assertTrue(getExtraOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", getExtraOptions().get("java_outer_classname"));
        Assert.assertTrue(getExtraOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", getExtraOptions().get("optimize_for"));
        Assert.assertFalse(((Map) (getMessageMap())).isEmpty());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).createNewFile());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canExecute());
        Assert.assertEquals("google.protobuf", getPackageName());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertEquals(0, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).lastModified())));
        Assert.assertEquals("com.google.protobuf", getJavaPackageName());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toASCIIString());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getTotalSpace())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawFragment());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getPath());
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getParent());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawAuthority());
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).toString());
        Assert.assertEquals(16, ((int) (((Set) (((Map) (getMessageMap())).entrySet())).size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canWrite());
        Assert.assertFalse(isOverridden());
        Assert.assertNull(getLast());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getPath());
    }

    @Test(timeout = 10000)
    public void testEnumWithTrailingSemicolon() throws Exception {
        File f = AmplProtoParserTest.getFile("enum_with_semicolon.proto");
        boolean o_testEnumWithTrailingSemicolon__3 = f.exists();
        Assert.assertTrue(o_testEnumWithTrailingSemicolon__3);
        Proto proto = new Proto(f);
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals(1654408354, ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).lastModified())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getParent());
        Assert.assertNull(getMutablePackageName());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getPath());
        Assert.assertEquals(1258385817, ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).createNewFile());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getName());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isHidden());
        Assert.assertTrue(isEmptyA());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isHidden());
        Assert.assertEquals((-1222636731), ((int) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).hashCode())));
        Assert.assertEquals((-1244353054), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).hashCode())));
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertTrue(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getName());
        Assert.assertTrue(((Collection) (getMessages())).isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).listFiles());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isAbsolute());
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getCanonicalPath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isDirectory());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", getSourcePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", getSourcePath());
        Assert.assertFalse(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isOpaque());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdir());
        Assert.assertEquals("file", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toString());
        Assert.assertNull(getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPath());
        Assert.assertEquals((-1222636731), ((int) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).hashCode())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isAbsolute());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getSchemeSpecificPart());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).list());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isHidden());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).toString());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertNull(getMutablePackageName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdirs());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).exists());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).setReadOnly());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canRead());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getUsableSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getCanonicalPath());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getCanonicalPath());
        Assert.assertEquals((-1), ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPort())));
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getCanonicalPath());
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getParent());
        Assert.assertEquals(519L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).length())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canExecute());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getName());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getUserInfo());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canWrite());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isAbsolute());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawPath());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).delete());
        Assert.assertFalse(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParent());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).createNewFile());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getRef());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).toString());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getAuthority());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getFragment());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getUsableSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isFile());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).toString());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertEquals(0, ((int) (((Collection) (getMessages())).size())));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getFreeSpace())));
        Assert.assertTrue(((Collection) (getMessages())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getNameCount())));
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isDirectory());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).exists());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPort())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isDirectory());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getDefaultPort())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).setReadOnly());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", getSourcePath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canWrite());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toExternalForm());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdir());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canWrite());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).lastModified())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).setReadOnly());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getTotalSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).setReadOnly());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getUsableSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdirs());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isAbsolute());
        Assert.assertTrue(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isAbsolute());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).listFiles());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getUserInfo());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).createNewFile());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).listFiles());
        Assert.assertEquals("file", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getScheme());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).createNewFile());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawQuery());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertEquals(1254336911, ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).hashCode())));
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (getProto())).toString());
        Assert.assertEquals((-1221402924), ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).hashCode())));
        Assert.assertEquals(519L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getFile());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getFreeSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawUserInfo());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getAuthority());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPath());
        Assert.assertFalse(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canRead());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).delete());
        Assert.assertEquals("resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).delete());
        Assert.assertEquals(519L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).length())));
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).listFiles());
        Assert.assertEquals(0, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getFreeSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canExecute());
        Assert.assertNull(getPackageName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canRead());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canRead());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getHost());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).delete());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).exists());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getQuery());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdirs());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getMessages())).size())));
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getQuery());
        Assert.assertEquals(519L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).length())));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getFreeSpace())));
        Assert.assertEquals(1254336911, ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).hashCode())));
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toString());
        Assert.assertEquals("src/test", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getParent());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).setReadOnly());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isAbsolute());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getAbsolutePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).toString());
        Assert.assertNull(getMutablePackageName());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toString());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (getProto())).toString());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertFalse(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).isAbsolute());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isFile());
        Assert.assertTrue(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertNull(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getRoot());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (proto)).toString());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getAbsolutePath());
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).lastModified())));
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).createNewFile());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canExecute());
        Assert.assertNull(getPackageName());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertEquals(0, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).lastModified())));
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toASCIIString());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getTotalSpace())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawFragment());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getPath());
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getParent());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawAuthority());
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).toString());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canWrite());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getPath());
        ProtoUtil.loadFrom(f, proto);
        proto.getPackageName();
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals(1654408354, ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).lastModified())));
        Assert.assertEquals(70822, ((int) (((Set) (((Map) (getMessageMap())).keySet())).hashCode())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getParent());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getPath());
        Assert.assertEquals(1258385817, ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).createNewFile());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getName());
        Assert.assertEquals("rpc", getValue());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isHidden());
        Assert.assertTrue(isEmptyA());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isHidden());
        Assert.assertEquals((-1222636731), ((int) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).hashCode())));
        Assert.assertEquals((-1244353054), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).hashCode())));
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertFalse(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getName());
        Assert.assertFalse(((Collection) (getMessages())).isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).listFiles());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isAbsolute());
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getCanonicalPath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isDirectory());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", getSourcePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", getSourcePath());
        Assert.assertFalse(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isOpaque());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdir());
        Assert.assertEquals("file", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toString());
        Assert.assertEquals("rpc", getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPath());
        Assert.assertEquals((-1222636731), ((int) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).hashCode())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getTotalSpace())));
        Assert.assertEquals(1, ((int) (((Map) (getMessageMap())).size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isAbsolute());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getSchemeSpecificPart());
        Assert.assertEquals(1, ((int) (((Collection) (((Map) (getMessageMap())).values())).size())));
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).list());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isHidden());
        Assert.assertNull(getLast());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).toString());
        Assert.assertEquals("rpc", getOriginalPackageName());
        Assert.assertFalse(isOverridden());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdirs());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).exists());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).setReadOnly());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canRead());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getUsableSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(1, ((int) (((Map) (getMessageMap())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getCanonicalPath());
        Assert.assertEquals(2, ((int) (((Set) (((Map) (getEnumGroupMap())).entrySet())).size())));
        Assert.assertEquals(1, ((int) (((Set) (((Map) (getMessageMap())).keySet())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getCanonicalPath());
        Assert.assertEquals((-1), ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPort())));
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getCanonicalPath());
        Assert.assertFalse(((Set) (((Map) (getMessageMap())).keySet())).isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getImportedProtos())).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getParent());
        Assert.assertEquals(519L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).length())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canExecute());
        Assert.assertEquals("enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getName());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getUserInfo());
        Assert.assertFalse(isOverridden());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canWrite());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isAbsolute());
        Assert.assertFalse(((Map) (getEnumGroupMap())).isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((Map) (getMessageMap())).isEmpty());
        Assert.assertTrue(((Collection) (getServices())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawPath());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).delete());
        Assert.assertFalse(((Set) (((Map) (getEnumGroupMap())).keySet())).isEmpty());
        Assert.assertFalse(isEmpty());
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParent());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).createNewFile());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getRef());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).toString());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getAuthority());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getFragment());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getUsableSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(2, ((int) (((Collection) (((Map) (getEnumGroupMap())).values())).size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isFile());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).toString());
        Assert.assertEquals("rpc", getOriginalJavaPackageName());
        Assert.assertEquals(1, ((int) (((Collection) (getMessages())).size())));
        Assert.assertEquals("rpc", getValue());
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getFreeSpace())));
        Assert.assertFalse(((Collection) (getMessages())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getNameCount())));
        Assert.assertEquals("rpc", getValue());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isDirectory());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).exists());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPort())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isDirectory());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getDefaultPort())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).setReadOnly());
        Assert.assertEquals("rpc", getValue());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", getSourcePath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canWrite());
        Assert.assertEquals("rpc", getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toExternalForm());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdir());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canWrite());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).lastModified())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).setReadOnly());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getTotalSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).setReadOnly());
        Assert.assertFalse(((Set) (((Map) (getMessageMap())).entrySet())).isEmpty());
        Assert.assertTrue(((Collection) (getAnnotations())).isEmpty());
        Assert.assertEquals(120722124800L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getUsableSpace())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isFile());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdirs());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isAbsolute());
        Assert.assertTrue(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isAbsolute());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).listFiles());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getUserInfo());
        Assert.assertEquals(120722124800L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).createNewFile());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).listFiles());
        Assert.assertEquals("file", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getScheme());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).createNewFile());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawQuery());
        Assert.assertEquals(0, ((int) (((Collection) (getAnnotations())).size())));
        Assert.assertEquals(1254336911, ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).hashCode())));
        Assert.assertNull(getLast());
        Assert.assertEquals((-1221402924), ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).hashCode())));
        Assert.assertEquals(519L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getFile());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(127748894720L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getFreeSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("rpc", getOriginalJavaPackageName());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawUserInfo());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getAuthority());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPath());
        Assert.assertFalse(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canRead());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).delete());
        Assert.assertEquals("resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).delete());
        Assert.assertEquals(519L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).length())));
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).listFiles());
        Assert.assertEquals(2, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertNull(getLast());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getFreeSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canExecute());
        Assert.assertEquals("rpc", getPackageName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canRead());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canRead());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getHost());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).delete());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).exists());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getQuery());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdirs());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("rpc", getJavaPackageName());
        Assert.assertEquals(2, ((int) (((Map) (getEnumGroupMap())).size())));
        Assert.assertEquals(1, ((int) (((Collection) (getMessages())).size())));
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertEquals("rpc", getOriginalJavaPackageName());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getQuery());
        Assert.assertEquals(519L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).length())));
        Assert.assertEquals(127748894720L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getFreeSpace())));
        Assert.assertFalse(((Set) (((Map) (getEnumGroupMap())).entrySet())).isEmpty());
        Assert.assertEquals(1254336911, ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).hashCode())));
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toString());
        Assert.assertEquals("src/test", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getParent());
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).setReadOnly());
        Assert.assertEquals("rpc", getJavaPackageName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isAbsolute());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getAbsolutePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).toString());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toString());
        Assert.assertEquals("rpc", getOriginalPackageName());
        Assert.assertFalse(isOverridden());
        Assert.assertFalse(((Collection) (((Map) (getMessageMap())).values())).isEmpty());
        Assert.assertFalse(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).isAbsolute());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isFile());
        Assert.assertEquals(2, ((int) (((Set) (((Map) (getEnumGroupMap())).keySet())).size())));
        Assert.assertFalse(((Collection) (getEnumGroups())).isEmpty());
        Assert.assertNull(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getRoot());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getAbsolutePath());
        Assert.assertEquals(570531036, ((int) (((Set) (((Map) (getEnumGroupMap())).keySet())).hashCode())));
        Assert.assertEquals(0, ((int) (((Collection) (getServices())).size())));
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).lastModified())));
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((Map) (getMessageMap())).isEmpty());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).createNewFile());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isDirectory());
        Assert.assertFalse(((Collection) (((Map) (getEnumGroupMap())).values())).isEmpty());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canExecute());
        Assert.assertEquals("rpc", getPackageName());
        Assert.assertEquals(1, ((int) (size())));
        Assert.assertEquals(2, ((int) (((Collection) (getEnumGroups())).size())));
        Assert.assertTrue(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).lastModified())));
        Assert.assertEquals(2, ((int) (((Map) (getEnumGroupMap())).size())));
        Assert.assertEquals("rpc", getJavaPackageName());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toASCIIString());
        Assert.assertEquals(137864937472L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getTotalSpace())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawFragment());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getPath());
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getParent());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawAuthority());
        Assert.assertTrue(((Collection) (getImportedProtos())).isEmpty());
        Assert.assertFalse(((Map) (getEnumGroupMap())).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).toString());
        Assert.assertEquals(1, ((int) (((Set) (((Map) (getMessageMap())).entrySet())).size())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canWrite());
        Assert.assertFalse(isOverridden());
        Assert.assertNull(getLast());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getPath());
        Assert.assertTrue(o_testEnumWithTrailingSemicolon__3);
    }

    @Test(timeout = 120000)
    public void testSimple() throws Exception {
        File f = AmplProtoParserTest.getFile("TestModel.proto");
        f.exists();
        Proto proto = new Proto(f);
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(75522947, ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).hashCode())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsolutePath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isHidden());
        Assert.assertEquals(1528201395000L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).lastModified())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getParent());
        Assert.assertNull(getMutablePackageName());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getPath());
        Assert.assertEquals((-320499590), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).hashCode())));
        Assert.assertEquals("TestModel.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getName());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isHidden());
        Assert.assertTrue(isEmptyA());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isHidden());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(719854756, ((int) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).hashCode())));
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals((-1244353054), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).hashCode())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("TestModel.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getName());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).listFiles());
        Assert.assertEquals("TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isAbsolute());
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getCanonicalPath());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isDirectory());
        Assert.assertEquals("src/test/resources/TestModel.proto", getSourcePath());
        Assert.assertEquals("src/test/resources/TestModel.proto", getSourcePath());
        Assert.assertFalse(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isOpaque());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdir());
        Assert.assertEquals("file", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toString());
        Assert.assertNull(getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPath());
        Assert.assertFalse(isEmpty());
        Assert.assertEquals(719854756, ((int) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).hashCode())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdirs());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getTotalSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isAbsolute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getSchemeSpecificPart());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).list());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isHidden());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getAbsolutePath());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(282639695872L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getTotalSpace())));
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).toString());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertNull(getMutablePackageName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdirs());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).exists());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).setReadOnly());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canRead());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getCanonicalPath());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getCanonicalPath());
        Assert.assertEquals((-1), ((int) (((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPort())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(257825763328L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getCanonicalPath());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getParent());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).length())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canExecute());
        Assert.assertEquals("TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getName());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getUserInfo());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).canWrite());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isAbsolute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawPath());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).delete());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParent());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).list());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getRef());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).toString());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isFile());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).mkdir());
        Assert.assertEquals("", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getAuthority());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getFragment());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getUsableSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isFile());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).toString());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getNameCount())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).exists());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).exists());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getPort())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isDirectory());
        Assert.assertEquals((-1), ((int) (((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getDefaultPort())));
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).setReadOnly());
        Assert.assertEquals("src/test/resources/TestModel.proto", getSourcePath());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canWrite());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toExternalForm());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).mkdir());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canWrite());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isFile());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).lastModified())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).setReadOnly());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getTotalSpace())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).setReadOnly());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getUsableSpace())));
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isFile());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).mkdirs());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).isAbsolute());
        Assert.assertTrue(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).isAbsolute());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).listFiles());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getUserInfo());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getAbsolutePath());
        Assert.assertNull(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).listFiles());
        Assert.assertEquals("file", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getScheme());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).createNewFile());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawQuery());
        Assert.assertEquals((-324579474), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).hashCode())));
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (getProto())).toString());
        Assert.assertEquals(721078581, ((int) (((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).hashCode())));
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getFile());
        Assert.assertFalse(isEmpty());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getFreeSpace())));
        Assert.assertTrue(isEmpty());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawUserInfo());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getAuthority());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getPath());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canRead());
        Assert.assertEquals("resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).delete());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).length())));
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).listFiles());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(272206667776L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getFreeSpace())));
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canExecute());
        Assert.assertNull(getPackageName());
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).canRead());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canRead());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getHost());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getPath());
        Assert.assertNull(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).list());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).delete());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).exists());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getQuery());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).mkdirs());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(getOriginalJavaPackageName());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertNull(((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).getQuery());
        Assert.assertFalse(isEmpty());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).length())));
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getFreeSpace())));
        Assert.assertEquals((-324579474), ((int) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).hashCode())));
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmpty());
        Assert.assertTrue(isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URL) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURL())).toString());
        Assert.assertEquals("src/test", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getParent());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).setReadOnly());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).isAbsolute());
        Assert.assertTrue(isEmpty());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).mkdir());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getAbsolutePath());
        Assert.assertEquals("src/test/resources/TestModel.proto", ((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).toString());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(getMutablePackageName());
        Assert.assertEquals("src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toString());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (getProto())).toString());
        Assert.assertNull(getOriginalPackageName());
        Assert.assertTrue(isEmpty());
        Assert.assertNull(getMutableJavaPackageName());
        Assert.assertFalse(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).isAbsolute());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).isFile());
        Assert.assertNull(((Path) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toPath())).getRoot());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto) (proto)).toString());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getAbsolutePath());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).lastModified())));
        Assert.assertTrue(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).isDirectory());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).canExecute());
        Assert.assertNull(getPackageName());
        Assert.assertFalse(((File) (((io.protostuff.parser.Proto) (proto)).getFile())).canRead());
        Assert.assertEquals(0L, ((long) (((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).lastModified())));
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).toASCIIString());
        Assert.assertEquals(0L, ((long) (((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).getTotalSpace())));
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawFragment());
        Assert.assertEquals("src/test/resources/TestModel.proto", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getPath());
        Assert.assertEquals("src/test/resources", ((File) (((io.protostuff.parser.Proto) (getProto())).getFile())).getParent());
        Assert.assertNull(((URI) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).toURI())).getRawAuthority());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/TestModel.proto", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getAbsoluteFile())).toString());
        Assert.assertFalse(((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getCanonicalFile())).canWrite());
        Assert.assertTrue(isEmpty());
        Assert.assertEquals("src/test/resources", ((File) (((File) (((io.protostuff.parser.Proto) (proto)).getFile())).getParentFile())).getPath());
        ProtoUtil.loadFrom(f, proto);
        proto.getPackageName();
        proto.getJavaPackageName();
        boolean boolean_0 = (size()) == 0;
        boolean boolean_1 = (size()) == 3;
        Message foo = proto.getMessage("Foo");
        Message bar = proto.getMessage("Bar");
        Message baz = proto.getMessage("Baz");
        boolean boolean_2 = (size()) == 1;
        EnumGroup enumSample = foo.getNestedEnumGroup("EnumSample");
        boolean boolean_3 = (size()) == 5;
        enumSample.getValue(0).getName();
        enumSample.getValue(1).getName();
        enumSample.getValue(2).getName();
        enumSample.getValue(3).getName();
        enumSample.getValue(4).getName();
        boolean boolean_4 = (size()) == 9;
        Field.Int32 foo_some_int = ((Field.Int32) (foo.getField("some_int")));
        Field.String foo_some_string = ((Field.String) (foo.getField("some_string")));
        MessageField foo_bar = ((MessageField) (foo.getField("bar")));
        EnumField foo_some_enum = ((EnumField) (foo.getField("some_enum")));
        Field.Bytes foo_some_bytes = ((Field.Bytes) (foo.getField("some_bytes")));
        Field.Bool foo_some_boolean = ((Field.Bool) (foo.getField("some_boolean")));
        Field.Float foo_some_float = ((Field.Float) (foo.getField("some_float")));
        Field.Double foo_some_double = ((Field.Double) (foo.getField("some_double")));
        Field.Int64 foo_some_long = ((Field.Int64) (foo.getField("some_long")));
        boolean boolean_5 = (foo_some_int != null) && ((foo_some_int.modifier) == (REPEATED));
        boolean boolean_6 = (foo_some_string != null) && ((foo_some_string.modifier) == (REPEATED));
        boolean boolean_7 = (foo_bar != null) && ((foo_bar.modifier) == (REPEATED));
        boolean boolean_8 = (foo_some_enum != null) && ((foo_some_enum.modifier) == (REPEATED));
        boolean boolean_9 = (foo_some_bytes != null) && ((foo_some_bytes.modifier) == (REPEATED));
        boolean boolean_10 = (foo_some_boolean != null) && ((foo_some_boolean.modifier) == (REPEATED));
        boolean boolean_11 = (foo_some_float != null) && ((foo_some_float.modifier) == (REPEATED));
        boolean boolean_12 = (foo_some_double != null) && ((foo_some_double.modifier) == (REPEATED));
        boolean boolean_13 = (foo_some_long != null) && ((foo_some_long.modifier) == (REPEATED));
        Field.Int32 bar_some_int = ((Field.Int32) (bar.getField("some_int")));
        Field.String bar_some_string = ((Field.String) (bar.getField("some_string")));
        MessageField bar_baz = ((MessageField) (bar.getField("baz")));
        EnumField bar_some_enum = ((EnumField) (bar.getField("some_enum")));
        Field.Bytes bar_some_bytes = ((Field.Bytes) (bar.getField("some_bytes")));
        Field.Bool bar_some_boolean = ((Field.Bool) (bar.getField("some_boolean")));
        Field.Float bar_some_float = ((Field.Float) (bar.getField("some_float")));
        Field.Double bar_some_double = ((Field.Double) (bar.getField("some_double")));
        Field.Int64 bar_some_long = ((Field.Int64) (bar.getField("some_long")));
        boolean boolean_14 = (bar_some_int != null) && ((bar_some_int.modifier) == (OPTIONAL));
        boolean boolean_15 = (bar_some_string != null) && ((bar_some_string.modifier) == (OPTIONAL));
        boolean boolean_16 = (bar_baz != null) && ((bar_baz.modifier) == (OPTIONAL));
        boolean boolean_17 = (bar_some_enum != null) && ((bar_some_enum.modifier) == (OPTIONAL));
        boolean boolean_18 = (bar_some_bytes != null) && ((bar_some_bytes.modifier) == (OPTIONAL));
        boolean boolean_19 = (bar_some_boolean != null) && ((bar_some_boolean.modifier) == (OPTIONAL));
        boolean boolean_20 = (bar_some_float != null) && ((bar_some_float.modifier) == (OPTIONAL));
        boolean boolean_21 = (bar_some_double != null) && ((bar_some_double.modifier) == (OPTIONAL));
        boolean boolean_22 = (bar_some_long != null) && ((bar_some_long.modifier) == (OPTIONAL));
        Field.Int64 baz_id = ((Field.Int64) (baz.getField("id")));
        Field.String baz_name = ((Field.String) (baz.getField("name")));
        Field.Int64 baz_timestamp = ((Field.Int64) (baz.getField("timestamp")));
        Field.Bytes baz_data = ((Field.Bytes) (baz.getField("data")));
        boolean boolean_23 = (baz_id != null) && ((baz_id.modifier) == (REQUIRED));
        boolean boolean_24 = (baz_name != null) && ((baz_name.modifier) == (OPTIONAL));
        boolean boolean_25 = (baz_timestamp != null) && ((baz_timestamp.modifier) == (OPTIONAL));
        boolean boolean_26 = (baz_data != null) && ((baz_data.modifier) == (OPTIONAL));
        Integer.valueOf(127);
        new String(bar_some_string.defaultValue.getBytes(ISO_8859_1), "UTF-8");
        Float.valueOf(127.0F);
        Double.valueOf(45.123);
        byte[] data = baz_data.getDefaultValue();
        boolean boolean_27 = (data != null) && ((data.length) == 2);
        boolean boolean_28 = ((data[0]) & 255) == 250;
        boolean boolean_29 = ((data[1]) & 255) == 206;
    }
}

