package io.protostuff.parser;


import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import org.junit.Assert;
import org.junit.Test;


public class AmplProtoParserTest {
    static URL getResource(String path) throws IOException {
        return Thread.currentThread().getContextClassLoader().getResource(path);
    }

    static File getFile(String path) {
        return new File(new File("src/test/resources"), path);
    }

    @Test(timeout = 10000)
    public void testDescriptorProto() throws Exception {
        File f = AmplProtoParserTest.getFile("descriptor.proto");
        boolean o_testDescriptorProto__3 = f.exists();
        Assert.assertTrue(o_testDescriptorProto__3);
        Proto proto = new Proto(f);
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).isEmpty());
        Assert.assertEquals(-1693972289, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getServiceMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).lastModified())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getParent());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getPath());
        Assert.assertEquals(-2089994826, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).createNewFile());
        Assert.assertEquals("descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getName());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isHidden());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).isEmptyA());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isHidden());
        Assert.assertEquals(227478868, ((int) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).hashCode())));
        Assert.assertEquals(-1244353054, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).hashCode())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroupMap().isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).size())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).isEmpty());
        Assert.assertEquals("descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getName());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).listFiles());
        Assert.assertEquals("descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getName());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getEnumGroupMap().isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).isEmptyA());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getCanonicalPath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isDirectory());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getSourcePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((io.protostuff.parser.Proto)proto).getSourcePath());
        Assert.assertFalse(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isOpaque());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdir());
        Assert.assertEquals("file", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPath());
        Assert.assertEquals(227478868, ((int) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).hashCode())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getTotalSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isAbsolute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getSchemeSpecificPart());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).list());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isHidden());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getOriginalPackageName());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getMutablePackageName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdirs());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).exists());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).setReadOnly());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canRead());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getCanonicalPath());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getCanonicalPath());
        Assert.assertEquals(-1, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPort())));
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getCanonicalPath());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getParent());
        Assert.assertEquals(17087L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).length())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canExecute());
        Assert.assertEquals("descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getName());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getUserInfo());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canWrite());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isAbsolute());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawPath());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getMutableJavaPackageName());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).delete());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).size())));
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParent());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getA().isEmpty());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).createNewFile());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getRef());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).toString());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getAnnotationMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getAuthority());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).size())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getFragment());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getUsableSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtensions().isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isFile());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalJavaPackageName());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).size())));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getNameCount())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotationMap().isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isDirectory());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).exists());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPort())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isDirectory());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getDefaultPort())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).setReadOnly());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getSourcePath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canWrite());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getTotalSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toExternalForm());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdir());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canWrite());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).lastModified())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).setReadOnly());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getAnnotationMap().isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getTotalSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).setReadOnly());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).isEmpty());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getUsableSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdirs());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isAbsolute());
        Assert.assertTrue(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isAbsolute());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).listFiles());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getUserInfo());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).createNewFile());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).listFiles());
        Assert.assertEquals("file", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getScheme());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).createNewFile());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawQuery());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).size())));
        Assert.assertEquals(-2094033494, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).hashCode())));
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).toString());
        Assert.assertEquals(228448453, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).hashCode())));
        Assert.assertEquals(17087L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getFile());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getEnumGroupMap().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServiceMap().isEmpty());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getFreeSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getA().isEmpty());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalJavaPackageName());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getServiceMap().isEmpty());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawUserInfo());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getAuthority());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isDirectory());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPath());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canRead());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).delete());
        Assert.assertEquals("resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).delete());
        Assert.assertEquals(17087L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).length())));
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).listFiles());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).size())));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getFreeSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canExecute());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getPackageName());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canRead());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canRead());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getHost());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).delete());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).exists());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getQuery());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdirs());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getA().isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).size())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).isEmpty());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getOriginalJavaPackageName());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getMutableJavaPackageName());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getQuery());
        Assert.assertEquals(17087L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).length())));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getFreeSpace())));
        Assert.assertEquals(-2094033494, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).hashCode())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toString());
        Assert.assertEquals("src/test", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getParent());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).setReadOnly());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isAbsolute());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getAbsolutePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getMutablePackageName());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toString());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalPackageName());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName());
        Assert.assertFalse(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).isAbsolute());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isFile());
        Assert.assertNull(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getRoot());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).isEmpty());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto)proto).toString());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getAbsolutePath());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).size())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).lastModified())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).createNewFile());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isDirectory());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canExecute());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getPackageName());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).size())));
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).size())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).lastModified())));
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toASCIIString());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getTotalSpace())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawFragment());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getPath());
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getParent());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawAuthority());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).toString());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canWrite());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getPath());
        ProtoUtil.loadFrom(f, proto);
        proto.getPackageName();
        Assert.assertTrue(o_testDescriptorProto__3);
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getO().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)proto).getO().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getO().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)proto).getO().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getO().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)proto).getO().get("optimize_for"));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).isEmpty());
        Assert.assertEquals(-1693972289, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getServiceMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).lastModified())));
        Assert.assertEquals(-1976051905, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).keySet()).hashCode())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getParent());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().get("optimize_for"));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getPath());
        Assert.assertEquals(-2089994826, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).createNewFile());
        Assert.assertEquals("descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getName());
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutableJavaPackageName()).getValue());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isHidden());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).isEmptyA());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isHidden());
        Assert.assertEquals(227478868, ((int) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).hashCode())));
        Assert.assertEquals(-1244353054, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).hashCode())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroupMap().isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).size())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getStandardOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)proto).getStandardOptions().get("optimize_for"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().get("optimize_for"));
        Assert.assertEquals("descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getName());
        Assert.assertFalse(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).listFiles());
        Assert.assertEquals("descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getName());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getEnumGroupMap().isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).isEmptyA());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getCanonicalPath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isDirectory());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getSourcePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((io.protostuff.parser.Proto)proto).getSourcePath());
        Assert.assertFalse(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isOpaque());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdir());
        Assert.assertEquals("file", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toString());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Proto)proto).getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPath());
        Assert.assertEquals(227478868, ((int) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).hashCode())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getTotalSpace())));
        Assert.assertEquals(16, ((int) (((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtraOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)proto).getExtraOptions().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtraOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)proto).getExtraOptions().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtraOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)proto).getExtraOptions().get("optimize_for"));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getSchemeSpecificPart());
        Assert.assertEquals(16, ((int) (((java.util.Collection)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).values()).size())));
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).list());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isHidden());
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName()).getLast());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).toString());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Proto)proto).getOriginalPackageName());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutablePackageName()).isOverridden());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdirs());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).exists());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getStandardOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getStandardOptions().get("optimize_for"));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).setReadOnly());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canRead());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getUsableSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().get("optimize_for"));
        Assert.assertEquals(16, ((int) (((java.util.Map)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessageMap()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getCanonicalPath());
        Assert.assertEquals(16, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).keySet()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getCanonicalPath());
        Assert.assertEquals(-1, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPort())));
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getCanonicalPath());
        Assert.assertFalse(((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).keySet()).isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getParent());
        Assert.assertEquals(17087L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).length())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canExecute());
        Assert.assertEquals("descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getName());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getUserInfo());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName()).isOverridden());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canWrite());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().get("optimize_for"));
        Assert.assertFalse(((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawPath());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).delete());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).size())));
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParent());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getA().isEmpty());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).createNewFile());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getRef());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).toString());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getAnnotationMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getAuthority());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).size())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getFragment());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getUsableSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtensions().isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isFile());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).toString());
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalJavaPackageName());
        Assert.assertEquals(16, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).size())));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName()).getValue());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getNameCount())));
        Assert.assertFalse(((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).isEmpty());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName()).getValue());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotationMap().isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isDirectory());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).exists());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPort())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isDirectory());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getDefaultPort())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).setReadOnly());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutablePackageName()).getValue());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getSourcePath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canWrite());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getTotalSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toExternalForm());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().get("optimize_for"));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdir());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canWrite());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).lastModified())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).setReadOnly());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getAnnotationMap().isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getTotalSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).setReadOnly());
        Assert.assertFalse(((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).entrySet()).isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).isEmpty());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getUsableSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdirs());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isAbsolute());
        Assert.assertTrue(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isAbsolute());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).listFiles());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getUserInfo());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).createNewFile());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).listFiles());
        Assert.assertEquals("file", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getScheme());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).createNewFile());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawQuery());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).size())));
        Assert.assertEquals(-2094033494, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).hashCode())));
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutableJavaPackageName()).getLast());
        Assert.assertEquals(228448453, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).hashCode())));
        Assert.assertEquals(17087L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getFile());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getEnumGroupMap().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServiceMap().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)proto).getOptions().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)proto).getOptions().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)proto).getOptions().get("optimize_for"));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getFreeSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getA().isEmpty());
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalJavaPackageName());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getServiceMap().isEmpty());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawUserInfo());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getAuthority());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isDirectory());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPath());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canRead());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).delete());
        Assert.assertEquals("resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).delete());
        Assert.assertEquals(17087L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).length())));
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).listFiles());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).size())));
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName()).getLast());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getStandardOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getStandardOptions().get("optimize_for"));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getFreeSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canExecute());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getPackageName());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canRead());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canRead());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getHost());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).delete());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).exists());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getQuery());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdirs());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getA().isEmpty());
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getJavaPackageName());
        Assert.assertEquals(16, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).size())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).isEmpty());
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)proto).getOriginalJavaPackageName());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getQuery());
        Assert.assertEquals(17087L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).length())));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getFreeSpace())));
        Assert.assertEquals(-2094033494, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).hashCode())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toString());
        Assert.assertEquals("src/test", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getParent());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).setReadOnly());
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getJavaPackageName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isAbsolute());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getAbsolutePath());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).toString());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toString());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalPackageName());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName()).isOverridden());
        Assert.assertFalse(((java.util.Collection)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).values()).isEmpty());
        Assert.assertFalse(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).isAbsolute());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isFile());
        Assert.assertNull(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getRoot());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getAbsolutePath());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).size())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).lastModified())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().containsKey("java_package"));
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().get("java_package"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().containsKey("java_outer_classname"));
        Assert.assertEquals("DescriptorProtos", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().get("java_outer_classname"));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().containsKey("optimize_for"));
        Assert.assertEquals("SPEED", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().get("optimize_for"));
        Assert.assertFalse(((java.util.Map)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessageMap()).isEmpty());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).createNewFile());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isDirectory());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canExecute());
        Assert.assertEquals("google.protobuf", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getPackageName());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).size())));
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).size())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).lastModified())));
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toASCIIString());
        Assert.assertEquals("com.google.protobuf", ((io.protostuff.parser.Proto)proto).getJavaPackageName());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getTotalSpace())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawFragment());
        Assert.assertEquals("src/test/resources/descriptor.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getPath());
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getParent());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawAuthority());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/descriptor.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).toString());
        Assert.assertEquals(16, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).entrySet()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canWrite());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutableJavaPackageName()).isOverridden());
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutablePackageName()).getLast());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getPath());
    }

    @Test(timeout = 10000)
    public void testEnumWithTrailingSemicolon() throws Exception {
        File f = AmplProtoParserTest.getFile("enum_with_semicolon.proto");
        boolean o_testEnumWithTrailingSemicolon__3 = f.exists();
        Assert.assertTrue(o_testEnumWithTrailingSemicolon__3);
        Proto proto = new Proto(f);
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getO().isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).isEmpty());
        Assert.assertEquals(1654408354, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getServiceMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).lastModified())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getParent());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getPath());
        Assert.assertEquals(1258385817, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).createNewFile());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getName());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isHidden());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).isEmptyA());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isHidden());
        Assert.assertEquals(-1222636731, ((int) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).hashCode())));
        Assert.assertEquals(-1244353054, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).hashCode())));
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).size())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getStandardOptions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().isEmpty());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getName());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).listFiles());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getName());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).isEmptyA());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getCanonicalPath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isDirectory());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getSourcePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((io.protostuff.parser.Proto)proto).getSourcePath());
        Assert.assertFalse(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isOpaque());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdir());
        Assert.assertEquals("file", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPath());
        Assert.assertEquals(-1222636731, ((int) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).hashCode())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getTotalSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtraOptions().isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getSchemeSpecificPart());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).list());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isHidden());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getOriginalPackageName());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getMutablePackageName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdirs());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).exists());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getStandardOptions().isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).setReadOnly());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canRead());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getUsableSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getCanonicalPath());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getCanonicalPath());
        Assert.assertEquals(-1, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPort())));
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getCanonicalPath());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getParent());
        Assert.assertEquals(519L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).length())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canExecute());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getName());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getUserInfo());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canWrite());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawPath());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getMutableJavaPackageName());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).delete());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).size())));
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParent());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getA().isEmpty());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).createNewFile());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getRef());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).toString());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getAnnotationMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getAuthority());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).size())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getFragment());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getUsableSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtensions().isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isFile());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalJavaPackageName());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).size())));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getNameCount())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotationMap().isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isDirectory());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).exists());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPort())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isDirectory());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getDefaultPort())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).setReadOnly());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getSourcePath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canWrite());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getTotalSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toExternalForm());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdir());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canWrite());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).lastModified())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).setReadOnly());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getAnnotationMap().isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getTotalSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).setReadOnly());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).isEmpty());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getUsableSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdirs());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isAbsolute());
        Assert.assertTrue(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isAbsolute());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).listFiles());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getUserInfo());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).createNewFile());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).listFiles());
        Assert.assertEquals("file", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getScheme());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).createNewFile());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawQuery());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).size())));
        Assert.assertEquals(1254336911, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).hashCode())));
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).toString());
        Assert.assertEquals(-1221402924, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).hashCode())));
        Assert.assertEquals(519L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getFile());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServiceMap().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getOptions().isEmpty());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getFreeSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getA().isEmpty());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalJavaPackageName());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getServiceMap().isEmpty());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawUserInfo());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getAuthority());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isDirectory());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPath());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canRead());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).delete());
        Assert.assertEquals("resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).delete());
        Assert.assertEquals(519L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).length())));
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).listFiles());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).size())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getStandardOptions().isEmpty());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getFreeSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canExecute());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getPackageName());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canRead());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canRead());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getHost());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).delete());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).exists());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getQuery());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdirs());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getA().isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).size())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).isEmpty());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getOriginalJavaPackageName());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getMutableJavaPackageName());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getQuery());
        Assert.assertEquals(519L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).length())));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getFreeSpace())));
        Assert.assertEquals(1254336911, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).hashCode())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toString());
        Assert.assertEquals("src/test", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getParent());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).setReadOnly());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isAbsolute());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getAbsolutePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)proto).getMutablePackageName());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toString());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).toString());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalPackageName());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName());
        Assert.assertFalse(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).isAbsolute());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isFile());
        Assert.assertNull(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getRoot());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).isEmpty());
        Assert.assertEquals("{packageName:null,standardOptions:{},extraOptions:{},messages:[]}", ((io.protostuff.parser.Proto)proto).toString());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getAbsolutePath());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).size())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).lastModified())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().isEmpty());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).createNewFile());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isDirectory());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canExecute());
        Assert.assertNull(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getPackageName());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).size())));
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).size())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).lastModified())));
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toASCIIString());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getTotalSpace())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawFragment());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getPath());
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getParent());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawAuthority());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).toString());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canWrite());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getPath());
        ProtoUtil.loadFrom(f, proto);
        proto.getPackageName();
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getO().isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).isEmpty());
        Assert.assertEquals(1654408354, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getServiceMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getHost());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isHidden());
        Assert.assertEquals(1526826971000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).lastModified())));
        Assert.assertEquals(70822, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).keySet()).hashCode())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdirs());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getParent());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getO().isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getPath());
        Assert.assertEquals(1258385817, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).hashCode())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).createNewFile());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getName());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutableJavaPackageName()).getValue());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isHidden());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).isEmptyA());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isHidden());
        Assert.assertEquals(-1222636731, ((int) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).hashCode())));
        Assert.assertEquals(-1244353054, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).hashCode())));
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).size())));
        Assert.assertFalse(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getStandardOptions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getO().isEmpty());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getName());
        Assert.assertFalse(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).listFiles());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getName());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).isEmptyA());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getCanonicalPath());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isDirectory());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getSourcePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((io.protostuff.parser.Proto)proto).getSourcePath());
        Assert.assertFalse(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isOpaque());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdir());
        Assert.assertEquals("file", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getProtocol());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toString());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)proto).getPackageName());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPath());
        Assert.assertEquals(-1222636731, ((int) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).hashCode())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdirs());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getTotalSpace())));
        Assert.assertEquals(1, ((int) (((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isAbsolute());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtraOptions().isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getSchemeSpecificPart());
        Assert.assertEquals(1, ((int) (((java.util.Collection)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).values()).size())));
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).list());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isHidden());
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName()).getLast());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getAbsolutePath());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getTotalSpace())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).lastModified())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawSchemeSpecificPart());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).toString());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)proto).getOriginalPackageName());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutablePackageName()).isOverridden());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdirs());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).exists());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getStandardOptions().isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).setReadOnly());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canRead());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOptions().isEmpty());
        Assert.assertEquals(1, ((int) (((java.util.Map)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessageMap()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getCanonicalPath());
        Assert.assertEquals(2, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).entrySet()).size())));
        Assert.assertEquals(1, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).keySet()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getCanonicalPath());
        Assert.assertEquals(-1, ((int) (((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPort())));
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getUsableSpace())));
        Assert.assertEquals(4096L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getCanonicalPath());
        Assert.assertFalse(((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).keySet()).isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).size())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getParent());
        Assert.assertEquals(519L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).length())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canExecute());
        Assert.assertEquals("enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getName());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getUserInfo());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName()).isOverridden());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).canWrite());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isAbsolute());
        Assert.assertFalse(((java.util.Map)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroupMap()).isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getExtraOptions().isEmpty());
        Assert.assertFalse(((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawPath());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).delete());
        Assert.assertFalse(((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).keySet()).isEmpty());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).isEmpty());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getServices()).size())));
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParent());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtensions().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getA().isEmpty());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).createNewFile());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getRef());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canWrite());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).toString());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).mkdir());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getAnnotationMap().isEmpty());
        Assert.assertEquals("", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getAuthority());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).size())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getFragment());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getUsableSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getExtensions().isEmpty());
        Assert.assertEquals(2, ((int) (((java.util.Collection)((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).values()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isFile());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).toString());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalJavaPackageName());
        Assert.assertEquals(1, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessages()).size())));
        Assert.assertEquals("rpc", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName()).getValue());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getFreeSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalPath());
        Assert.assertEquals(4, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getNameCount())));
        Assert.assertFalse(((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).isEmpty());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName()).getValue());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotationMap().isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).exists());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isDirectory());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).exists());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getPort())));
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isDirectory());
        Assert.assertEquals(-1, ((int) (((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getDefaultPort())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).setReadOnly());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutablePackageName()).getValue());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getSourcePath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canWrite());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOriginalPackageName());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).getTotalSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).isHidden());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toExternalForm());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getOptions().isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).mkdir());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canWrite());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getAnnotations()).isEmpty());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isFile());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).lastModified())));
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).setReadOnly());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getAnnotationMap().isEmpty());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getTotalSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).setReadOnly());
        Assert.assertFalse(((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).entrySet()).isEmpty());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).isEmpty());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getUsableSpace())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isFile());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).mkdirs());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).isAbsolute());
        Assert.assertTrue(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).isAbsolute());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).listFiles());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getUserInfo());
        Assert.assertEquals(120714690560L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getUsableSpace())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getAbsolutePath());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).createNewFile());
        Assert.assertNull(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).listFiles());
        Assert.assertEquals("file", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getScheme());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).createNewFile());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawQuery());
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getAnnotations()).size())));
        Assert.assertEquals(1254336911, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).hashCode())));
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutableJavaPackageName()).getLast());
        Assert.assertEquals(-1221402924, ((int) (((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).hashCode())));
        Assert.assertEquals(519L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).length())));
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getFile());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServiceMap().isEmpty());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getOptions().isEmpty());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getFreeSpace())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getA().isEmpty());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalJavaPackageName());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getServiceMap().isEmpty());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawUserInfo());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getAuthority());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isDirectory());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canExecute());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getPath());
        Assert.assertFalse(((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)proto).getError()).isEmpty());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canRead());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).delete());
        Assert.assertEquals("resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).delete());
        Assert.assertEquals(519L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).length())));
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).listFiles());
        Assert.assertEquals(2, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroups()).size())));
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutableJavaPackageName()).getLast());
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getStandardOptions().isEmpty());
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getFreeSpace())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canExecute());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getPackageName());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).canRead());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canRead());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getHost());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getPath());
        Assert.assertNull(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).list());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).delete());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).exists());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getQuery());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).mkdirs());
        Assert.assertTrue(((io.protostuff.parser.Proto)proto).getA().isEmpty());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).getJavaPackageName());
        Assert.assertEquals(2, ((int) (((java.util.Map)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getEnumGroupMap()).size())));
        Assert.assertEquals(1, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getMessages()).size())));
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)proto).getImportedProtos()).isEmpty());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)proto).getOriginalJavaPackageName());
        Assert.assertNull(((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).getQuery());
        Assert.assertEquals(519L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).length())));
        Assert.assertEquals(127741460480L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getFreeSpace())));
        Assert.assertFalse(((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).entrySet()).isEmpty());
        Assert.assertEquals(1254336911, ((int) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).hashCode())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getProto()).isEmptyA());
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URL)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURL()).toString());
        Assert.assertEquals("src/test", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getParent());
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).setReadOnly());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getJavaPackageName());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).isAbsolute());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).mkdir());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getAbsolutePath());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).toString());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toString());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getOriginalPackageName());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMutablePackageName()).isOverridden());
        Assert.assertFalse(((java.util.Collection)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).values()).isEmpty());
        Assert.assertFalse(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).isAbsolute());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).isFile());
        Assert.assertEquals(2, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).keySet()).size())));
        Assert.assertNull(((java.nio.file.Path)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toPath()).getRoot());
        Assert.assertFalse(((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).isEmpty());
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).delete());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getAbsolutePath());
        Assert.assertEquals(570531036, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).keySet()).hashCode())));
        Assert.assertEquals(0, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getServices()).size())));
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).lastModified())));
        Assert.assertTrue(((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getExtraOptions().isEmpty());
        Assert.assertFalse(((java.util.Map)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getMessageMap()).isEmpty());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).createNewFile());
        Assert.assertTrue(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).isDirectory());
        Assert.assertFalse(((java.util.Collection)((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).values()).isEmpty());
        Assert.assertFalse(((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).canExecute());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getPackageName());
        Assert.assertEquals(1, ((int) (((io.protostuff.parser.ErrorMap)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getError()).size())));
        Assert.assertEquals(2, ((int) (((java.util.Collection)((io.protostuff.parser.Proto)proto).getEnumGroups()).size())));
        Assert.assertTrue(((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).canRead());
        Assert.assertEquals(1526826358000L, ((long) (((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).lastModified())));
        Assert.assertEquals(2, ((int) (((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).size())));
        Assert.assertEquals("file:/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).toASCIIString());
        Assert.assertEquals("rpc", ((io.protostuff.parser.Proto)proto).getJavaPackageName());
        Assert.assertEquals(137864937472L, ((long) (((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).getTotalSpace())));
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawFragment());
        Assert.assertEquals("src/test/resources/enum_with_semicolon.proto", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getPath());
        Assert.assertEquals("src/test/resources", ((java.io.File)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getFile()).getParent());
        Assert.assertNull(((java.net.URI)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).toURI()).getRawAuthority());
        Assert.assertTrue(((java.util.Collection)((io.protostuff.parser.Proto)((io.protostuff.parser.Proto)proto).getProto()).getImportedProtos()).isEmpty());
        Assert.assertFalse(((java.util.Map)((io.protostuff.parser.Proto)proto).getEnumGroupMap()).isEmpty());
        Assert.assertEquals("/tmp/Ex2Amplifier-experiments/dataset/may-2018/protostuff/119/protostuff-parser/src/test/resources/enum_with_semicolon.proto", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getAbsoluteFile()).toString());
        Assert.assertEquals(1, ((int) (((java.util.Set)((java.util.Map)((io.protostuff.parser.Proto)proto).getMessageMap()).entrySet()).size())));
        Assert.assertFalse(((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getCanonicalFile()).canWrite());
        Assert.assertFalse(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutableJavaPackageName()).isOverridden());
        Assert.assertNull(((io.protostuff.parser.Mutable)((io.protostuff.parser.Proto)proto).getMutablePackageName()).getLast());
        Assert.assertEquals("src/test/resources", ((java.io.File)((java.io.File)((io.protostuff.parser.Proto)proto).getFile()).getParentFile()).getPath());
        Assert.assertTrue(o_testEnumWithTrailingSemicolon__3);
    }
}

